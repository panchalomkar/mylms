{"version":3,"file":"task.min.js","sources":["../../src/remuiblck/task.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-dupe-keys */\n/* eslint-disable quote-props */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-len */\n/* eslint-disable no-undef */\n\nif ( typeof rmblckmdlrelease !== 'undefined' && rmblckmdlrelease < '4.3' ) {\n    moduleDependencies = [\n        'jquery',\n        'core/ajax',\n        'core/notification',\n        'core/templates',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/str',\n        'local_edwiserpagebuilder/remuiblck/modal_task_popup',\n        'local_edwiserpagebuilder/remuiblck/events',\n        'local_edwiserpagebuilder/remuiblck/task_filters',\n        'local_edwiserpagebuilder/remuiblck/task_view'\n    ];\n} else {\n    moduleDependencies = [\n        'jquery',\n        'core/ajax',\n        'core/notification',\n        'core/templates',\n        'local_edwiserpagebuilder/remuiblck/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/str',\n        'local_edwiserpagebuilder/remuiblck/modal_task_popup',\n        'local_edwiserpagebuilder/remuiblck/events',\n        'local_edwiserpagebuilder/remuiblck/task_filters',\n        'local_edwiserpagebuilder/remuiblck/task_view'\n    ];\n}\n\ndefine(moduleDependencies, function(\n    $,\n    ajax,\n    Notification,\n    Templates,\n    ModalFactory,\n    ModalEvents,\n    Fragment,\n    Str,\n    ModalTaskPopup,\n    RemuiblckEvents,\n    TaskFilters,\n    TaskView\n) {\n    var SELECTORS = {\n        ADD_TASK: '[data-region=\"add-schedule-task\"]',\n        TASK: '[data-region=\"task-item\"]',\n        TASK_SUBJECT: '[data-toggle=\"collapse\"]',\n        TASK_EDIT: '[data-action=\"edit\"]',\n        TASK_POPUP: \"[data-region='task-body']\",\n        TASK_DURATION_FILTER: '[data-region=\"task-duration-filter\"]',\n        TASK_STATUS_FILTER: '[data-region=\"task-status-filter\"]',\n        TASK_FILTER_OPTION: '[data-value]',\n        TASK_SUBJECT: '.item-title .panel-heading span',\n        PANEL: '.panel',\n        PANEL_HEADING: '.panel-heading',\n        PANEL_ACTIONS: 'panel-actions',\n        TOASTER_CONTAINER: '[aria-task-toasters]',\n        TOASTER_CONTAINER_ID: 'aria-task-toasters',\n        TASK_PROCESSING: '.block-processing',\n    };\n\n    // ****** IMPORTANT ******\n    // Do not change the sequence.\n    // If you want to add new strings here, add it at the bottom.\n    // Do not remove any string from the array.\n    // There is no way we can revert back if sequence is changed.\n    // ****** IMPORTANT ******\n    const strings = [\n        {key: 'deletetask', component: 'local_edwiserpagebuilder'},\n        {key: 'deletetaskmessage', component: 'local_edwiserpagebuilder'},\n        {key: 'taskdeleted', component: 'local_edwiserpagebuilder'},\n        {key: 'ok', component: 'moodle'}\n    ];\n\n    var LANGS; // Gloabl variable to store languages.\n\n    // Functionality to fetch strings.\n    // Functionality to fetch strings.\n    async function fetchLanguages() {\n        await Str.get_strings(strings).then(function(results) {\n            LANGS = results;\n            return results;\n        });\n    }\n\n    var PROMISES = {\n        /**\n         * Create new task promise call\n         * @param  {JSON} settings task settings object\n         * @return {promise} ajax promise\n         */\n        CREATE_NEW_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'local_edwiserpagebuilder_remuiblck_action',\n                args: {\n                    action: \"create_new_task\",\n                    config: JSON.stringify(settings)\n                }\n            }])[0];\n        },\n\n        /**\n         * Edit task settings promise call\n         * @param  {object} settings task settings object\n         * @return {promise} ajax promise\n         */\n        EDIT_TASK: function(settings) {\n            return ajax.call([{\n                methodname: 'local_edwiserpagebuilder_remuiblck_action',\n                args: {\n                    action: \"edit_task\",\n                    config: JSON.stringify(settings)\n                }\n            }])[0];\n        },\n\n        /**\n         * Toggle task completion promise call\n         * @param  {int}     taskid id of task\n         * @param  {bool}    status true for completed and false for incomplete\n         * @return {promise}        ajax promise\n         */\n        COMPLETE_TASK: function(taskid, status) {\n            return ajax.call([{\n                methodname: 'local_edwiserpagebuilder_remuiblck_action',\n                args: {\n                    action: \"complete_task\",\n                    config: JSON.stringify({\n                        \"id\": taskid,\n                        \"status\": status\n                    })\n                }\n            }])[0];\n        },\n\n        /**\n         * Delete existing task\n         * @param  {int}     taskid task id\n         * @return {promise}        ajax promise\n         */\n        DELETE_TASK: function(taskid) {\n            return ajax.call([{\n                methodname: 'local_edwiserpagebuilder_remuiblck_action',\n                args: {\n                    action: \"delete_task\",\n                    config: JSON.stringify({\n                        \"id\": taskid\n                    })\n                }\n            }])[0];\n        },\n\n        /**\n         * Notify users about task\n         * @param {int}      taskid task id\n         * @param {string}   type   type of notification from one of these [create|complete|incomplete]\n         * @return {promise}        ajax promise\n         */\n        NOTIFY_USERS: function(taskid, type) {\n            return ajax.call([{\n                methodname: 'local_edwiserpagebuilder_remuiblck_action',\n                args: {\n                    action: \"task_notify_users\",\n                    config: JSON.stringify({\n                        \"id\": taskid,\n                        \"type\": type\n                    })\n                }\n            }])[0];\n        }\n    };\n    var FRAGMENTS = {\n        /**\n         * Fetch task form fragment call\n         * @param  {int}     taskid task id\n         * @return {promise}        fragment promise call\n         */\n        GET_TASK_FORM: function(taskid) {\n            return Fragment.loadFragment(\n                'local_edwiserpagebuilder',\n                'task_form',\n                contextid,\n                {\n                    taskid: taskid\n                }\n            );\n        }\n    };\n\n    /**\n     * Close task popup modal\n     * @param {ModalFactory} modal modal factory object\n     */\n    var closeTaskPopup = function(modal) {\n        modal.hide();\n        modal.destroy();\n    };\n\n    /**\n     * Get subject of task on the basis of id\n     * It check whether task is present in task list\n     * @param  {string} root   root container id\n     * @param  {[type]} taskid task id\n     * @return {string}        task subject\n     */\n    var getSubject = function(root, taskid) {\n        let task = $(root).find(SELECTORS.TASK + '[data-id=\"' + taskid + '\"]');\n        if (task) {\n            return task.find(SELECTORS.TASK_SUBJECT).text();\n        }\n        return taskid;\n    };\n\n    /**\n     * Show toaster\n     * @param  {string} root     root container id\n     * @param  {[type]} position position of toaster\n     * @param  {[type]} type     type of toaster\n     * @param  {[type]} message  message to show in toater\n     */\n    var toast = function(root, position, type, message) {\n        if ($(root).find('.' + position + SELECTORS.TOASTER_CONTAINER).length == 0) {\n            $(root).append('<div class=\"toaster ' + position + '\"' + SELECTORS.TOASTER_CONTAINER_ID + 'role=\"alert\"></div>');\n        }\n        let newToast = $('<div class=\"toast toast-just-text ' + type + ' toast-shadow\"><div class=\"toast-message\">' + message + '</div></div>');\n        $(root).find(SELECTORS.TOASTER_CONTAINER).append(newToast);\n        setTimeout(function() {\n            newToast.addClass('show');\n        }, 0);\n        setTimeout(function() {\n            newToast.removeClass('show');\n            setTimeout(function() {\n                newToast.remove();\n            }, 250);\n        }, 2000);\n    };\n\n    /**\n     * Delete task\n     * @param {string} root   block root selector\n     * @param {int}    taskid id of task\n     * @param {taskModal} taskModal\n     */\n    var deleteTask = function(root, taskid, taskModal) {\n        let subject = getSubject(root, taskid);\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: M.util.get_string('deletetask', 'local_edwiserpagebuilder'),\n            body: M.util.get_string('deletetaskmessage', 'local_edwiserpagebuilder', subject)\n        }, $('#create'))\n        .done(function(modal) {\n            modal.setSaveButtonText(M.util.get_string('ok', 'moodle'));\n            modal.getRoot().on(ModalEvents.save, function() {\n                PROMISES.DELETE_TASK(taskid).done(function(response) {\n                    response = JSON.parse(response);\n                    if (response.status == true) {\n                        closeTaskPopup(modal);\n                        closeTaskPopup(taskModal);\n                        setTimeout(function () {\n                            closeTaskPopup(modal);\n                        }, 200);\n                        setTimeout(function () {\n                            closeTaskPopup(taskModal);\n                        }, 200);\n                        loadTasks(root);\n                        toast(root, 'toast-top-center', 'toast-error', M.util.get_string('taskdeleted', 'local_edwiserpagebuilder', subject));\n                        return;\n                    }\n                    Notification.exception({\n                        name: response.msg\n                    });\n                }).fail(Notification.exception);\n            }).on(ModalEvents.cancel, function() {\n                closeTaskPopup(modal);\n            });\n            modal.show();\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Notify users about task. This call ajax request\n     * @param {int}      taskid   task id\n     * @param {string}   type     type of notification from one of these [create|complete|incomplete]\n     * callback call to execute after notify completion\n     */\n    var notifyUsers = function(taskid, type) {\n        var callback = arguments.length > 1 && arguments[2] !== undefined ? arguments[2] : null;\n        PROMISES.NOTIFY_USERS(taskid, type).done(callback).fail(function(ex) {\n            Notification.exception(ex);\n            if (callback != null) {\n                callback();\n            }\n        });\n    };\n\n    /**\n     * Open task popup for creating new task editing existing\n     * @param {DOM} root   block DOM object\n     * @param {int} taskid task id. -1 if new task\n     */\n    var taskPopup = function(root, taskid) {\n        ModalFactory.create(\n            {\n                type: ModalTaskPopup.TYPE,\n                templateContext: {\n                    new: taskid == -1\n                }\n            },\n            $('#create')\n        ).done(function(modal) {\n            modal.show();\n            modal.setBody(FRAGMENTS.GET_TASK_FORM(taskid));\n            modal.getRoot().on(ModalEvents.hidden, function() {\n\n                // Handle modal close event\n                closeTaskPopup(modal);\n            }).on(RemuiblckEvents.TASK_SAVE, function() {\n\n                if (!modal.valid_settings()) {\n                    return;\n                }\n                modal.saving();\n                // Handle task save event\n                let settings = modal.get_task_settings();\n                if (taskid == -1) {\n                    PROMISES.CREATE_NEW_TASK(settings).done(function(response) {\n                        response = JSON.parse(response);\n                        if (settings.notify == true) {\n                            notifyUsers(response, 'create', function() {\n                                closeTaskPopup(modal);\n                                loadTasks(root);\n                            });\n                            return;\n                        }\n                        closeTaskPopup(modal);\n                        loadTasks(root);\n                    }).fail(function(ex) {\n                        modal.saving(false);\n                        Notification.exception(ex);\n                    });\n                    return;\n                }\n                settings.id = taskid;\n                PROMISES.EDIT_TASK(settings).done(function() {\n                    closeTaskPopup(modal);\n                    loadTasks(root);\n                }).fail(function(ex) {\n                    modal.saving(false);\n                    Notification.exception(ex);\n                });\n            }).on(RemuiblckEvents.TASK_DELETE, function() {\n\n                // Handle task delete event\n                deleteTask(root, taskid, modal);\n            }).on(RemuiblckEvents.TASK_CANCEL, function() {\n\n                // Handle task cancel event\n                closeTaskPopup(modal);\n            });\n        });\n    };\n\n    /**\n     * Load tasks in task list\n     * @param {DOM} root block DOM object\n     */\n    var loadTasks = function(root) {\n        TaskView.loadTasks(root, TaskFilters.getTaskDuration(root), TaskFilters.getTaskStatus(root));\n    };\n\n    /**\n     * Toggle task completion\n     * @param {string} root   block root selector\n     * @param {int}    taskid id of task\n     * @param {bool}   status true for completed and false for incomplete\n     */\n    var completeTask = function(root, taskid, status) {\n        TaskView.toggleTaskProcessing(root, true);\n        PROMISES.COMPLETE_TASK(taskid, status).done(function(response) {\n            response = JSON.parse(response);\n            if (response.status == true) {\n                loadTasks(root);\n                return;\n            }\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"' + taskid + '\"]').find('input').prop('checked', !status);\n            Notification.exception({\n                name: response.msg\n            });\n            TaskView.toggleTaskProcessing(root);\n        }).fail(function(ex) {\n            Notification.exception(ex);\n            $(root + ' ' + SELECTORS.TASK + '[data-id=\"' + taskid + '\"]').find('input').prop('checked', !status);\n            TaskView.toggleTaskProcessing(root);\n        });\n    };\n\n\n    /**\n     * Initialise dom events\n     * @param {DOM} root block DOM object\n     */\n    var initialiseEvents = function(root) {\n        $('body').on('click', root + \" \" + SELECTORS.ADD_TASK, function() {\n            taskPopup(root, -1);\n        }).on('click', root + ' ' + SELECTORS.TASK, function(e) {\n            if ($(e.target).is('input')) {\n                completeTask(root, $(this).data('id'), $(e.target).is(':checked'));\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_SUBJECT)) {\n                return;\n            }\n            if ($(e.target).is(SELECTORS.TASK_EDIT) || $(e.target).parent().is(SELECTORS.TASK_EDIT)) {\n                taskPopup(root, $(this).data('id'));\n            }\n        });\n    };\n\n    var updateContainers = function(root) {\n        // Move add button panel heading\n        let button = $(root).find(SELECTORS.ADD_TASK).detach();\n        let panelHeading = $(root).closest(SELECTORS.PANEL).find(SELECTORS.PANEL_HEADING);\n        let panelActions = $(panelHeading).find('.' + SELECTORS.PANEL_ACTIONS);\n        if (panelActions.length == 0) {\n            panelActions = $('<div class=\"' + SELECTORS.PANEL_ACTIONS + '\"></div>');\n            panelHeading.append(panelActions);\n        }\n        panelActions.prepend(button);\n        button.removeClass('d-none');\n\n        let taskProcessing = $(root).find(SELECTORS.TASK_PROCESSING).detach();\n        let panel = $(panelHeading).parent(SELECTORS.PANEL);\n        panel.prepend(taskProcessing);\n    };\n\n    /**\n     * Initialise tasks\n     * @param {DOM} root block DOM object\n     */\n    var init = async function(root) {\n        await fetchLanguages();\n        $(document).ready(function() {\n            initialiseEvents(root);\n            // updateContainers(root);\n        });\n        TaskView.init(root);\n        TaskFilters.init(root);\n    };\n    return {\n        init: init\n    };\n});\n"],"names":["rmblckmdlrelease","moduleDependencies","define","$","ajax","Notification","Templates","ModalFactory","ModalEvents","Fragment","Str","ModalTaskPopup","RemuiblckEvents","TaskFilters","TaskView","SELECTORS","strings","key","component","PROMISES","settings","call","methodname","args","action","config","JSON","stringify","taskid","status","type","FRAGMENTS","loadFragment","contextid","closeTaskPopup","modal","hide","destroy","deleteTask","root","taskModal","subject","task","find","text","getSubject","create","types","SAVE_CANCEL","title","M","util","get_string","body","done","setSaveButtonText","getRoot","on","save","response","parse","setTimeout","loadTasks","position","message","length","append","newToast","addClass","removeClass","remove","toast","exception","name","msg","fail","cancel","show","taskPopup","TYPE","templateContext","new","setBody","hidden","TASK_SAVE","valid_settings","saving","get_task_settings","id","ex","notify","callback","arguments","undefined","notifyUsers","TASK_DELETE","TASK_CANCEL","getTaskDuration","getTaskStatus","initialiseEvents","e","target","is","toggleTaskProcessing","prop","completeTask","this","data","parent","init","async","get_strings","then","results","fetchLanguages","document","ready"],"mappings":"AAQiC,oBAArBA,kBAAoCA,iBAAmB,MAC/DC,mBAAqB,CACjB,SACA,YACA,oBACA,iBACA,qBACA,oBACA,gBACA,WACA,sDACA,4CACA,kDACA,gDAGJA,mBAAqB,CACjB,SACA,YACA,oBACA,iBACA,mDACA,oBACA,gBACA,WACA,sDACA,4CACA,kDACA,gDAIRC,iDAAOD,oBAAoB,SACvBE,EACAC,KACAC,aACAC,UACAC,aACAC,YACAC,SACAC,IACAC,eACAC,gBACAC,YACAC,cAEIC,mBACU,oCADVA,eAEM,4BAFNA,oBAIW,uBAJXA,yBASc,kCATdA,4BAamB,uBAbnBA,+BAcsB,2BAUpBC,QAAU,CACZ,CAACC,IAAK,aAAcC,UAAW,4BAC/B,CAACD,IAAK,oBAAqBC,UAAW,4BACtC,CAACD,IAAK,cAAeC,UAAW,4BAChC,CAACD,IAAK,KAAMC,UAAW,eAcvBC,yBAMiB,SAASC,iBACfhB,KAAKiB,KAAK,CAAC,CACdC,WAAY,4CACZC,KAAM,CACFC,OAAQ,kBACRC,OAAQC,KAAKC,UAAUP,cAE3B,IAbRD,mBAqBW,SAASC,iBACThB,KAAKiB,KAAK,CAAC,CACdC,WAAY,4CACZC,KAAM,CACFC,OAAQ,YACRC,OAAQC,KAAKC,UAAUP,cAE3B,IA5BRD,uBAqCe,SAASS,OAAQC,eACrBzB,KAAKiB,KAAK,CAAC,CACdC,WAAY,4CACZC,KAAM,CACFC,OAAQ,gBACRC,OAAQC,KAAKC,UAAU,IACbC,cACIC,aAGlB,IA/CRV,qBAuDa,SAASS,eACXxB,KAAKiB,KAAK,CAAC,CACdC,WAAY,4CACZC,KAAM,CACFC,OAAQ,cACRC,OAAQC,KAAKC,UAAU,IACbC,aAGd,IAhERT,sBAyEc,SAASS,OAAQE,aACpB1B,KAAKiB,KAAK,CAAC,CACdC,WAAY,4CACZC,KAAM,CACFC,OAAQ,oBACRC,OAAQC,KAAKC,UAAU,IACbC,YACEE,WAGhB,IAGRC,wBAMe,SAASH,eACbnB,SAASuB,aACZ,2BACA,YACAC,UACA,CACIL,OAAQA,UAUpBM,eAAiB,SAASC,OAC1BA,MAAMC,OACND,MAAME,WAgDNC,WAAa,SAASC,KAAMX,OAAQY,eAChCC,QAvCS,SAASF,KAAMX,YACxBc,KAAOvC,EAAEoC,MAAMI,KAAK5B,eAAiB,aAAea,OAAS,aAC7Dc,KACOA,KAAKC,KAAK5B,0BAAwB6B,OAEtChB,OAkCOiB,CAAWN,KAAMX,QAC/BrB,aAAauC,OAAO,CAChBhB,KAAMvB,aAAawC,MAAMC,YACzBC,MAAOC,EAAEC,KAAKC,WAAW,aAAc,4BACvCC,KAAMH,EAAEC,KAAKC,WAAW,oBAAqB,2BAA4BX,UAC1EtC,EAAE,YACJmD,MAAK,SAASnB,OACXA,MAAMoB,kBAAkBL,EAAEC,KAAKC,WAAW,KAAM,WAChDjB,MAAMqB,UAAUC,GAAGjD,YAAYkD,MAAM,WACjCvC,qBAAqBS,QAAQ0B,MAAK,SAASK,aAEhB,IADvBA,SAAWjC,KAAKkC,MAAMD,WACT9B,cACTK,eAAeC,OACfD,eAAeM,WACfqB,YAAW,WACP3B,eAAeC,SAChB,KACH0B,YAAW,WACP3B,eAAeM,aAChB,KACHsB,UAAUvB,WA5ClB,SAASA,KAAMwB,SAAUjC,KAAMkC,SACkC,GAArE7D,EAAEoC,MAAMI,KAAK,IAAMoB,SAAWhD,6BAA6BkD,QAC3D9D,EAAEoC,MAAM2B,OAAO,uBAAyBH,SAAW,IAAMhD,+BAAiC,2BAE1FoD,SAAWhE,EAAE,qCAAuC2B,KAAO,6CAA+CkC,QAAU,gBACxH7D,EAAEoC,MAAMI,KAAK5B,6BAA6BmD,OAAOC,UACjDN,YAAW,WACPM,SAASC,SAAS,UACnB,GACHP,YAAW,WACPM,SAASE,YAAY,QACrBR,YAAW,WACPM,SAASG,WACV,OACJ,KA+BaC,CAAMhC,KAAM,mBAAoB,cAAeW,EAAEC,KAAKC,WAAW,cAAe,2BAA4BX,UAGhHpC,aAAamE,UAAU,CACnBC,KAAMd,SAASe,SAEpBC,KAAKtE,aAAamE,cACtBf,GAAGjD,YAAYoE,QAAQ,WACtB1C,eAAeC,UAEnBA,MAAM0C,UAETF,KAAKtE,aAAamE,YAwBnBM,UAAY,SAASvC,KAAMX,QAC3BrB,aAAauC,OACT,CACIhB,KAAMnB,eAAeoE,KACrBC,gBAAiB,CACbC,KAAgB,GAAXrD,SAGbzB,EAAE,YACJmD,MAAK,SAASnB,OACZA,MAAM0C,OACN1C,MAAM+C,QAAQnD,wBAAwBH,SACtCO,MAAMqB,UAAUC,GAAGjD,YAAY2E,QAAQ,WAGnCjD,eAAeC,UAChBsB,GAAG7C,gBAAgBwE,WAAW,eAExBjD,MAAMkD,wBAGXlD,MAAMmD,aAEFlE,SAAWe,MAAMoD,qBACN,GAAX3D,QAkBJR,SAASoE,GAAK5D,OACdT,mBAAmBC,UAAUkC,MAAK,WAC9BpB,eAAeC,OACf2B,UAAUvB,SACXoC,MAAK,SAASc,IACbtD,MAAMmD,QAAO,GACbjF,aAAamE,UAAUiB,QAvBvBtE,yBAAyBC,UAAUkC,MAAK,SAASK,UAC7CA,SAAWjC,KAAKkC,MAAMD,UACC,GAAnBvC,SAASsE,QAObxD,eAAeC,OACf2B,UAAUvB,OAlDZ,SAASX,OAAQE,UAC3B6D,SAAWC,UAAU3B,OAAS,QAAsB4B,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,KACnFzE,sBAAsBS,OAAQE,MAAMwB,KAAKqC,UAAUhB,MAAK,SAASc,IAC7DpF,aAAamE,UAAUiB,IACP,MAAZE,UACAA,cAsCYG,CAAYnC,SAAU,UAAU,WAC5BzB,eAAeC,OACf2B,UAAUvB,YAMnBoC,MAAK,SAASc,IACbtD,MAAMmD,QAAO,GACbjF,aAAamE,UAAUiB,UAYhChC,GAAG7C,gBAAgBmF,aAAa,WAG/BzD,WAAWC,KAAMX,OAAQO,UAC1BsB,GAAG7C,gBAAgBoF,aAAa,WAG/B9D,eAAeC,cASvB2B,UAAY,SAASvB,MACrBzB,SAASgD,UAAUvB,KAAM1B,YAAYoF,gBAAgB1D,MAAO1B,YAAYqF,cAAc3D,QAkCtF4D,iBAAmB,SAAS5D,MAC5BpC,EAAE,QAAQsD,GAAG,QAASlB,KAAO,IAAMxB,oBAAoB,WACnD+D,UAAUvC,MAAO,MAClBkB,GAAG,QAASlB,KAAO,IAAMxB,gBAAgB,SAASqF,GAC7CjG,EAAEiG,EAAEC,QAAQC,GAAG,SA7BR,SAAS/D,KAAMX,OAAQC,QACtCf,SAASyF,qBAAqBhE,MAAM,GACpCpB,uBAAuBS,OAAQC,QAAQyB,MAAK,SAASK,UAE1B,IADvBA,SAAWjC,KAAKkC,MAAMD,WACT9B,QAIb1B,EAAEoC,KAAO,IAAMxB,eAAiB,aAAea,OAAS,MAAMe,KAAK,SAAS6D,KAAK,WAAY3E,QAC7FxB,aAAamE,UAAU,CACnBC,KAAMd,SAASe,MAEnB5D,SAASyF,qBAAqBhE,OAP1BuB,UAAUvB,SAQfoC,MAAK,SAASc,IACbpF,aAAamE,UAAUiB,IACvBtF,EAAEoC,KAAO,IAAMxB,eAAiB,aAAea,OAAS,MAAMe,KAAK,SAAS6D,KAAK,WAAY3E,QAC7Ff,SAASyF,qBAAqBhE,SAc1BkE,CAAalE,KAAMpC,EAAEuG,MAAMC,KAAK,MAAOxG,EAAEiG,EAAEC,QAAQC,GAAG,aAGtDnG,EAAEiG,EAAEC,QAAQC,GAAGvF,4BAGfZ,EAAEiG,EAAEC,QAAQC,GAAGvF,sBAAwBZ,EAAEiG,EAAEC,QAAQO,SAASN,GAAGvF,uBAC/D+D,UAAUvC,KAAMpC,EAAEuG,MAAMC,KAAK,iBAmClC,CACHE,KAVOC,eAAevE,mCAzWhB7B,IAAIqG,YAAY/F,SAASgG,MAAK,SAASC,gBACjCA,QACDA,WAwWLC,GACN/G,EAAEgH,UAAUC,OAAM,WACdjB,iBAAiB5D,SAGrBzB,SAAS+F,KAAKtE,MACd1B,YAAYgG,KAAKtE"}