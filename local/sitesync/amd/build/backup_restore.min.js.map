{"version":3,"file":"backup_restore.min.js","sources":["../src/backup_restore.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable max-len */\n/* eslint-disable jsdoc/require-jsdoc */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_sitesync/backup_restore\n * @copyright (c) 2020 WisdmLabs (https://wisdmlabs.com/)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax','local_sitesync/main'], function ($, ajax, Syncnmain) {\n\n    var SELECTORS = {\n        \"BACKUP_ALERT_LINK\": '.backup-alert-link',\n        \"RESTORE_BACKUP\": '#restorebackup',\n        \"BACKUP_MODAL_NOTIFICATIN_WRAPPER\": '#backupModal .notification-wrapper',\n        \"BACKUP_MODAL\": '#backupModal',\n        \"SHOW_CHANGES_BTN\": '.show-changes-btn',\n        \"BACKUP_DATA_CONTINAER\": '.backupdatacontainer',\n    };\n\n    var currentversion = false;\n    const registerEvents = () => {\n\n        $(SELECTORS.BACKUP_MODAL).on('show.bs.modal', function(event) {\n            // Get the button that triggered the modal\n            var button = $(event.relatedTarget);\n\n            // Extract data attributes\n            var version = button.attr('data-version'); // Get the version\n            currentversion = version;\n\n            const $backupContainers = $(SELECTORS.BACKUP_DATA_CONTINAER);\n\n            const lastVersion = $backupContainers.last().data('version-content');\n\n            var backupselector = $(`${SELECTORS.BACKUP_DATA_CONTINAER}[data-version-content=\"${version}\"]`); // Get the backup details\n            var backup = backupselector.html();\n\n            // Update the modal content\n            var modal = $(this);\n            modal.find('#modalVersion').text('Version: ' + version); // Set version name\n            modal.find('#modalBackupContent').html(backup);\n\n            if (lastVersion == currentversion) {\n                $(SELECTORS.RESTORE_BACKUP).attr('disabled', 'disabled');\n            } else {\n                $(SELECTORS.RESTORE_BACKUP).removeAttr('disabled');\n            }// Set backup details\n        });\n\n        $(document).on('click', SELECTORS.RESTORE_BACKUP, async function () {\n            $(this).attr('disabled', 'disabled');\n            let alerthtml = Syncnmain.alerthtml(M.util.get_string('restoreinprogress','local_sitesync'), 'warning');\n\n            $(SELECTORS.BACKUP_MODAL_NOTIFICATIN_WRAPPER).empty().append(alerthtml);\n            if(currentversion) {\n                let args = {\n                    \"action\": \"restore_backup\",\n                    \"config\": JSON.stringify({\n                        \"restoreconfig\": currentversion,\n                        \"pluginname\" : \"theme_remui\",\n                    }),\n                };\n\n                let response = await trigger_backup(args);\n                response = JSON.parse(response);\n                if(response){\n                    let alerthtml = Syncnmain.alerthtml(M.util.get_string('restorecompleted','local_sitesync'), 'success');\n\n                    $(SELECTORS.BACKUP_MODAL_NOTIFICATIN_WRAPPER).empty().append(alerthtml);\n\n                    setTimeout(() => {\n                        window.location.reload();\n                    }, 300);\n                }\n\n            }\n        });\n\n    };\n\n    /**\n     * Triggers a backup action using the local_sitesync_do_sync_action AJAX method.\n     *\n     * @param {Object} args - The arguments to pass to the AJAX method.\n     * @returns {Promise<string>} - The response from the AJAX method.\n     */\n    const trigger_backup = async (args) => {\n        const request = {\n            methodname: 'local_sitesync_do_sync_action',\n            args:args\n        };\n        const response = await ajax.call([request])[0];\n        return response;\n    };\n\n    const init = () => {\n        registerEvents();\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","ajax","Syncnmain","SELECTORS","currentversion","registerEvents","on","event","version","relatedTarget","attr","lastVersion","last","data","backup","html","modal","this","find","text","removeAttr","document","async","alerthtml","M","util","get_string","empty","append","args","JSON","stringify","response","trigger_backup","parse","setTimeout","window","location","reload","request","methodname","call","init"],"mappings":";;;;;AAyBAA,uCAAO,CAAC,SAAU,YAAY,wBAAwB,SAAUC,EAAGC,KAAMC,eAEjEC,yBAEkB,iBAFlBA,2CAGoC,qCAHpCA,uBAIgB,eAJhBA,gCAMyB,uBAGzBC,gBAAiB,QACfC,eAAiB,KAEnBL,EAAEG,wBAAwBG,GAAG,iBAAiB,SAASC,WAK/CC,QAHSR,EAAEO,MAAME,eAGAC,KAAK,gBAC1BN,eAAiBI,cAIXG,YAFoBX,EAAEG,iCAEUS,OAAOC,KAAK,uBAG9CC,OADiBd,YAAKG,kEAAyDK,eACvDO,OAGxBC,MAAQhB,EAAEiB,MACdD,MAAME,KAAK,iBAAiBC,KAAK,YAAcX,SAC/CQ,MAAME,KAAK,uBAAuBH,KAAKD,QAEnCH,aAAeP,eACfJ,EAAEG,0BAA0BO,KAAK,WAAY,YAE7CV,EAAEG,0BAA0BiB,WAAW,eAI/CpB,EAAEqB,UAAUf,GAAG,QAASH,0BAA0BmB,iBAC9CtB,EAAEiB,MAAMP,KAAK,WAAY,gBACrBa,UAAYrB,UAAUqB,UAAUC,EAAEC,KAAKC,WAAW,oBAAoB,kBAAmB,cAE7F1B,EAAEG,4CAA4CwB,QAAQC,OAAOL,WAC1DnB,eAAgB,KACXyB,KAAO,QACG,wBACAC,KAAKC,UAAU,eACJ3B,0BACF,iBAInB4B,eAAiBC,eAAeJ,SACpCG,SAAWF,KAAKI,MAAMF,UACnBA,SAAS,KACJT,UAAYrB,UAAUqB,UAAUC,EAAEC,KAAKC,WAAW,mBAAmB,kBAAmB,WAE5F1B,EAAEG,4CAA4CwB,QAAQC,OAAOL,WAE7DY,YAAW,KACPC,OAAOC,SAASC,WACjB,WAcbL,eAAiBX,MAAAA,aACbiB,QAAU,CACZC,WAAY,gCACZX,KAAKA,mBAEc5B,KAAKwC,KAAK,CAACF,UAAU,UAQzC,CACHG,KALS,KACTrC"}