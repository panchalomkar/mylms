{"version":3,"file":"connection.min.js","sources":["../src/connection.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable jsdoc/require-jsdoc */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_sitesync/connection\n * @copyright (c) 2020 WisdmLabs (https://wisdmlabs.com/)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Modal from 'core/modal';\n\nvar SELECTORS = {\n    \"REMOVE_CONNECTION\": '#removeConnection',\n    'INPUT_SITE_URL': '#site-url',\n    'INPUT_ACCESS_TOKEN': '#access-token',\n    \"FORM_ACTION_WRAPPER\": \".form-action-wrapper\",\n    \"FORM_ACIION_BUTTON\": \".form-action-wrapper .formaction\"\n};\n\nvar CONFIG = {\n    'TEST_CONNECTION_URL': '/webservice/rest/server.php',\n    'SLAVE_SITE_URL': false,\n    'SLAVE_ACCESS_TOKEN': false,\n    'SLAVE_VALIDATION_DATA': false,\n};\nlet connectionstatus = false;\nlet remuiActivestate = true;\n\n/**\n * Retrieves the current connection status.\n *\n * @returns {boolean} The current connection status.\n */\nexport const getConnectionStatus = () => {\n    return connectionstatus;\n};\nexport const remUiActiveState = () => {\n    return remuiActivestate;\n};\n/**\n * Saves the provided configuration settings.\n *\n * @param {Object[]} configs - An array of configuration objects to save.\n * @returns {Promise<Object>} The response from the server after saving the configurations.\n */\nexport const saveConfigs = async (configs = []) => {\n    const request = {\n        methodname: 'local_sitesync_save_config',\n        args: {\n            configs: configs\n        }\n    };\n\n    const response = await Ajax.call([request])[0];\n    return response;\n};\n\n/**\n * Retrieves the synchronization configurations like siteurl, accesstoken from the server.\n *\n * @returns {Promise<Object>} The response from the server containing the synchronization configurations.\n */\nexport const getSyncConfigs = async () => {\n    const request = {\n        methodname: 'local_sitesync_do_sync_action',\n        args: {\n            action: \"get_sync_configs\",\n            config: JSON.stringify({})\n        }\n    };\n\n    const response = await Ajax.call([request])[0];\n    return response;\n};\n/**\n * Generates an HTML button element for disconnecting from a connection.\n *\n * @param {string} buttontext - The text to display on the button.\n * @param {string} buttonclass - The CSS class(es) to apply to the button.\n * @returns {string} The HTML for the disconnect button.\n */\nfunction updateFormActionButtonState(buttontext, buttonclass) {\n    var removeConnectionButton = `<button type=\"submit\" class=\"btn ${buttonclass} formaction\" data-action=\"disconnect\">${buttontext}</button>`;\n    return removeConnectionButton;\n}\n\n/**\n * Adds a new step to the connection steps list.\n *\n * @param {string} steptext - The text to display for the step.\n * @param {string} stepdata - The unique identifier for the step.\n * @returns {void}\n */\nfunction addStep(steptext, stepdata) {\n    var stephtml = `<li class=\"d-flex align-items-center mb-3 step step-loading\" data-step=\"${stepdata}\">\n                    <span class=\"step-status mr-2\">\n                        <span class=\"loading-spinner spinner-border spinner-border-sm\" role=\"status\"></span>\n                        <i class=\"fa fa-check text-success\"></i>\n                        <i class=\"fa fa-times text-danger\"></i>\n                    </span>\n                    <span class=\"step-text\">${steptext}</span>\n                </li>`;\n    $('.connection-steps .list-unstyled').append(stephtml);\n}\n/**\n * Removes a step from the connection steps list.\n *\n * @param {string} stepdata - The unique identifier for the step to be removed.\n * @returns {void}\n */\nfunction clearStep(stepdata) {\n    $('.step[data-step=\"' + stepdata + '\"]').remove();\n}\n\n/**\n * Updates the status of a connection step in the UI.\n *\n * @param {string} stepdata - The unique identifier for the step.\n * @param {string} status - The new status for the step ('step-loading', 'step-success', or 'step-failure').\n * @returns {void}\n */\nfunction updateStepStatus(stepdata, status) {\n    $('.step[data-step=\"' + stepdata + '\"]').removeClass('step-loading step-success step-failure').addClass(status);\n}\n\n\n/**\n * An array of asynchronous functions that represent the steps in the connection process.\n * Each step performs a specific task, such as validating the connection, checking compatibility,\n * saving connection configs, and updating the form action button state.\n */\nconst connectionSteps = [\n    // Step 1: Validate connection\n    async () => {\n\n        clearStep(\"step1\");\n        addStep(M.util.get_string(\"chekingconnection\", \"local_sitesync\"), \"step1\");\n\n        let slaveValidationData = CONFIG.SLAVE_VALIDATION_DATA;\n\n        slaveValidationData = JSON.parse(slaveValidationData);\n\n        // if (!slaveValidationData[\"is_secure_site\"]) {\n        //     clearStep(\"step1\");\n        //     addStep(M.util.get_string(\"is_secure_site_fail\", \"local_sitesync\"), \"step1\");\n        //     updateStepStatus(\"step1\", \"step-failure\");\n        //     throw new Error('Connection failed');\n        // }\n\n        // if (!slaveValidationData[\"is_remui_active\"]) {\n        //     clearStep(\"step1\");\n        //     addStep(M.util.get_string(\"is_remui_active_fail\", \"local_sitesync\"), \"step1\");\n        //     updateStepStatus(\"step1\", \"step-failure\");\n        //     throw new Error('Connection failed');\n        // }\n\n\n        // Build the web service URL\n        const wsUrl = `${CONFIG.SLAVE_SITE_URL}/webservice/rest/server.php`;\n\n        // Create form data for the request\n        const formData = new FormData();\n        formData.append('wstoken', CONFIG.SLAVE_ACCESS_TOKEN);\n        formData.append('wsfunction', 'local_sitesync_check_connection');\n        formData.append('moodlewsrestformat', 'json');\n\n        const response = await fetch(wsUrl, {\n            method: 'POST',\n            body: formData\n        });\n        const result = await response.json();\n        if (!result) {\n            clearStep(\"step1\");\n            updateStepStatus(\"step1\", \"step-failure\");\n            throw new Error('Connection validation failed');\n        }\n\n        clearStep(\"step1\");\n        addStep(M.util.get_string(\"connectioncheckdone\", \"local_sitesync\"), \"step1\");\n        updateStepStatus(\"step1\", \"step-success\");\n        return result;\n    },\n\n    // Step 2: Checking Compatibility...\n    async () => {\n\n        clearStep(\"step2\");\n        addStep(M.util.get_string(\"chekingcompatibility\", \"local_sitesync\"), \"step2\");\n\n        // Build the web service URL\n        const wsUrl = `${CONFIG.SLAVE_SITE_URL}/webservice/rest/server.php`;\n\n        let slaveValidationData = CONFIG.SLAVE_VALIDATION_DATA;\n\n        // Create form data for the request\n        const formData = new FormData();\n        formData.append('wstoken', CONFIG.SLAVE_ACCESS_TOKEN);\n        formData.append('wsfunction', 'local_sitesync_compatibility_checker');\n        formData.append('moodlewsrestformat', 'json');\n        formData.append('action', \"check_master_server_compaibility\");\n        formData.append('config', slaveValidationData);\n\n        const response = await fetch(wsUrl, {\n            method: 'POST',\n            body: formData\n        });\n        let result = await response.json();\n        result = JSON.parse(result);\n        if (!result.status) {\n            if (result.failedkey == \"is_remui_active\") {\n                remuiActivestate = false;\n            } else {\n                clearStep(\"step2\");\n                addStep(result.message, \"step2\");\n                updateStepStatus(\"step2\", \"step-failure\");\n                throw new Error('Connection failed');\n            }\n        }\n        clearStep(\"step2\");\n        addStep(M.util.get_string(\"compatibilitycheckdone\", \"local_sitesync\"), \"step2\");\n        updateStepStatus(\"step2\", \"step-success\");\n        return result;\n\n    },\n\n    // Step 3: Save connection configs\n    // Validating server connection\n    async () => {\n\n        clearStep(\"step3\");\n        addStep(M.util.get_string(\"checkingservervalidity\", \"local_sitesync\"), \"step3\");\n        const configs = [\n            {\n                key: 'moodleurl',\n                value: CONFIG.SLAVE_SITE_URL,\n                plugin: 'local_sitesync'\n            },\n            {\n                key: 'accesstoken',\n                value: CONFIG.SLAVE_ACCESS_TOKEN,\n                plugin: 'local_sitesync'\n            },\n            {\n                key: 'connection',\n                value: true,\n                plugin: 'local_sitesync'\n            }\n        ];\n        clearStep(\"step3\");\n        addStep(M.util.get_string(\"servalidatated\", \"local_sitesync\"), \"step3\");\n        updateStepStatus(\"step3\", \"step-success\");\n        let result = await saveConfigs(configs);\n        return result;\n    },\n    // Step 3: Get sync configurations\n    async () => {\n        return await getSyncConfigs();\n    },\n    async () => {\n        let buttonhtml = updateFormActionButtonState(M.util.get_string('reset', \"local_sitesync\"), \"btn-outline-danger\");\n\n        let text = `<p class=\"text-success m-0 mb-2\">${M.util.get_string('connectedstatus', \"local_sitesync\")}</p>`;\n\n        $(SELECTORS.FORM_ACTION_WRAPPER).empty().append(text + buttonhtml);\n        connectionstatus = true;\n    }\n];\n\n/**\n * Initializes the connection functionality for the local_sitesync plugin.\n * This function sets up the event listeners for the connection form, handles the\n * connection and disconnection actions, and resets the connection if needed.\n */\nexport const init = () => {\n    const form = document.getElementById('Connection-form');\n\n    CONFIG.SLAVE_SITE_URL = $(SELECTORS.INPUT_SITE_URL).val().trim();\n\n    CONFIG.SLAVE_ACCESS_TOKEN = $(SELECTORS.INPUT_ACCESS_TOKEN).val().trim();\n\n    initiateConnectionSteps();\n    form.addEventListener('submit', async (e) => {\n        e.preventDefault();\n\n\n        const action = e.target.querySelector(\"button.formaction\").getAttribute(\"data-action\");\n\n        if (action == \"disconnect\") {\n            await reset_confirmaton_modal();\n        }\n\n        if (action == \"connect\") {\n            // await establishConnection(siteUrl, accessToken);\n            initiateConnectionSteps();\n        }\n\n    });\n\n    $(document).on('click', SELECTORS.REMOVE_CONNECTION, async () => {\n\n        let response = await resetConnection();\n\n        if (response) {\n            window.location.reload();\n        }\n    });\n};\n\n/**\n * Initiates the connection steps for the local_sitesync plugin.\n * This function retrieves the slave validation data, sets the slave site URL and access token,\n * and then executes the connection steps defined in the `connectionSteps` array.\n * If any errors occur during the connection process, a notification is displayed.\n */\nconst initiateConnectionSteps = async () => {\n    CONFIG.SLAVE_VALIDATION_DATA = await getSlaveValidationData();\n\n    CONFIG.SLAVE_SITE_URL = $(SELECTORS.INPUT_SITE_URL).val().trim();\n\n    CONFIG.SLAVE_ACCESS_TOKEN = $(SELECTORS.INPUT_ACCESS_TOKEN).val().trim();\n    if (CONFIG.SLAVE_SITE_URL && CONFIG.SLAVE_ACCESS_TOKEN) {\n        (async () => {\n            let stepResult;\n            try {\n                for (const step of connectionSteps) {\n                    stepResult = await step();\n                }\n            } catch (error) {\n                Notification.addNotification({\n                    message: `Connection process failed: ${error.message}`,\n                    type: 'error'\n                });\n                return;\n            }\n        })();\n    }\n};\n/**\n * Displays a confirmation modal to the user, asking if they are sure they want to disconnect.\n * The modal has a title \"Add public key\" and a body message \"Are you sure you want to disconnect?\".\n * The modal has a footer with a \"Yes\" button that has the ID \"removeConnection\".\n * The modal asked user if they want to disconnect.\n * @returns {Promise<Modal>} The created modal instance.\n */\nconst reset_confirmaton_modal = async () => {\n\n    const modal = await Modal.create({\n        title: 'Confirm connection reset',\n        // eslint-disable-next-line max-len\n        body: '<p>Are you sure you want to disconnect?</p>',\n        footer: '<button type=\"button\" class=\"btn btn-primary\" id=\"removeConnection\">Yes</button>',\n        show: true,\n        removeOnClose: true,\n    });\n\n    modal.show();\n\n    return modal;\n};\n\nexport const establishConnection = async (siteUrl, accessToken) => {\n    var configdata = [\n        {\n            key: 'moodleurl',\n            value: siteUrl,\n            plugin: 'local_sitesync'\n        },\n        {\n            key: 'accesstoken',\n            value: accessToken,\n            plugin: 'local_sitesync'\n        }\n    ];\n\n    // Build the web service URL\n    const wsUrl = `${siteUrl}/webservice/rest/server.php`;\n\n    // Create form data for the request\n    const formData = new FormData();\n    formData.append('wstoken', accessToken);\n    formData.append('wsfunction', 'local_sitesync_check_connection');\n    formData.append('moodlewsrestformat', 'json');\n\n    // Make the request to external site\n    fetch(wsUrl, {\n        method: 'POST',\n        body: formData\n    })\n        .then(response => response.json())\n        .then(data => {\n            if (data === true) {\n                configdata.push({\n                    key: 'connection',\n                    value: true,\n                    plugin: 'local_sitesync'\n                });\n                saveConfigs(configdata);\n                Notification.addNotification({\n                    message: 'Connection successful',\n                    type: 'success'\n                });\n\n                setTimeout(() => {\n                    window.location.reload();\n                }, 200);\n            } else {\n                configdata.push({\n                    key: 'connection',\n                    value: false,\n                    plugin: 'local_sitesync'\n                });\n                saveConfigs(configdata);\n                throw new Error('Connection failed');\n            }\n        })\n        .catch(error => {\n            configdata.push({\n                key: 'connection',\n                value: false,\n                plugin: 'local_sitesync'\n            });\n            saveConfigs(configdata);\n            Notification.addNotification({\n                message: 'Connection failed: ' + error.message,\n                type: 'error'\n            });\n        });\n};\n\n\n/**\n * Resets the connection configuration for the local_sitesync plugin.\n * This function sets the 'moodleurl', 'accesstoken', and 'connection' keys in the configdata array to false,\n * and then saves the updated configuration using the saveConfigs function.\n *\n * @returns {Promise<void>} A promise that resolves when the configuration has been saved.\n */\nexport const resetConnection = async () => {\n    var configdata = [\n        {\n            key: 'moodleurl',\n            value: false,\n            plugin: 'local_sitesync'\n        },\n        {\n            key: 'accesstoken',\n            value: false,\n            plugin: 'local_sitesync'\n        },\n        {\n            key: 'connection',\n            value: false,\n            plugin: 'local_sitesync'\n        }\n    ];\n\n    return saveConfigs(configdata);\n};\n/**\n * Retrieves the slave site validation data from the Moodle server.\n *\n * @returns {Promise<Object>} The response from the Moodle server containing the slave site validation data.\n */\nconst getSlaveValidationData = async () => {\n    const request = {\n        methodname: 'local_sitesync_compatibility_checker',\n        args: {\n            action: \"get_slave_validation_data\",\n            config: JSON.stringify({})\n        }\n    };\n\n    const response = await Ajax.call([request])[0];\n    return response;\n};\n"],"names":["SELECTORS","CONFIG","connectionstatus","remuiActivestate","saveConfigs","async","configs","request","methodname","args","response","Ajax","call","getSyncConfigs","action","config","JSON","stringify","addStep","steptext","stepdata","stephtml","append","clearStep","remove","updateStepStatus","status","removeClass","addClass","connectionSteps","M","util","get_string","slaveValidationData","SLAVE_VALIDATION_DATA","parse","wsUrl","SLAVE_SITE_URL","formData","FormData","SLAVE_ACCESS_TOKEN","fetch","method","body","result","json","Error","failedkey","message","key","value","plugin","buttonhtml","buttontext","text","empty","form","document","getElementById","val","trim","initiateConnectionSteps","addEventListener","e","preventDefault","target","querySelector","getAttribute","reset_confirmaton_modal","on","resetConnection","window","location","reload","getSlaveValidationData","stepResult","step","error","addNotification","type","modal","Modal","create","title","footer","show","removeOnClose","siteUrl","accessToken","configdata","then","data","push","setTimeout","catch"],"mappings":";;;;;sZA8BIA,4BACqB,oBADrBA,yBAEkB,YAFlBA,6BAGsB,gBAHtBA,8BAIuB,uBAIvBC,OAAS,qBACc,8CACL,sBACI,yBACG,OAEzBC,kBAAmB,EACnBC,kBAAmB,+BAOY,IACxBD,2CAEqB,IACrBC,uBAQEC,YAAcC,qBAAOC,+DAAU,SAClCC,QAAU,CACZC,WAAY,6BACZC,KAAM,CACFH,QAASA,UAIXI,eAAiBC,cAAKC,KAAK,CAACL,UAAU,UACrCG,iDAQEG,eAAiBR,gBACpBE,QAAU,CACZC,WAAY,gCACZC,KAAM,CACFK,OAAQ,mBACRC,OAAQC,KAAKC,UAAU,mBAIRN,cAAKC,KAAK,CAACL,UAAU,aAsBvCW,QAAQC,SAAUC,cACnBC,2FAAsFD,uYAMhDD,+DAExC,oCAAoCG,OAAOD,mBAQxCE,UAAUH,8BACb,oBAAsBA,SAAW,MAAMI,kBAUpCC,iBAAiBL,SAAUM,4BAC9B,oBAAsBN,SAAW,MAAMO,YAAY,0CAA0CC,SAASF,qDAStGG,gBAAkB,CAEpBxB,UAEIkB,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,oBAAqB,kBAAmB,aAE9DC,oBAAsBhC,OAAOiC,sBAEjCD,oBAAsBjB,KAAKmB,MAAMF,2BAkB3BG,gBAAWnC,OAAOoC,8CAGlBC,SAAW,IAAIC,SACrBD,SAAShB,OAAO,UAAWrB,OAAOuC,oBAClCF,SAAShB,OAAO,aAAc,mCAC9BgB,SAAShB,OAAO,qBAAsB,cAEhCZ,eAAiB+B,MAAML,MAAO,CAChCM,OAAQ,OACRC,KAAML,WAEJM,aAAelC,SAASmC,WACzBD,aACDrB,UAAU,SACVE,iBAAiB,QAAS,gBACpB,IAAIqB,MAAM,uCAGpBvB,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,sBAAuB,kBAAmB,SACpEP,iBAAiB,QAAS,gBACnBmB,QAIXvC,UAEIkB,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,uBAAwB,kBAAmB,eAG/DI,gBAAWnC,OAAOoC,kDAEpBJ,oBAAsBhC,OAAOiC,4BAG3BI,SAAW,IAAIC,SACrBD,SAAShB,OAAO,UAAWrB,OAAOuC,oBAClCF,SAAShB,OAAO,aAAc,wCAC9BgB,SAAShB,OAAO,qBAAsB,QACtCgB,SAAShB,OAAO,SAAU,oCAC1BgB,SAAShB,OAAO,SAAUW,2BAEpBvB,eAAiB+B,MAAML,MAAO,CAChCM,OAAQ,OACRC,KAAML,eAENM,aAAelC,SAASmC,UAC5BD,OAAS5B,KAAKmB,MAAMS,SACfA,OAAOlB,OAAQ,IACQ,mBAApBkB,OAAOG,gBAGPxB,UAAU,SACVL,QAAQ0B,OAAOI,QAAS,SACxBvB,iBAAiB,QAAS,gBACpB,IAAIqB,MAAM,qBALhB3C,kBAAmB,SAQ3BoB,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,yBAA0B,kBAAmB,SACvEP,iBAAiB,QAAS,gBACnBmB,QAMXvC,UAEIkB,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,yBAA0B,kBAAmB,eACjE1B,QAAU,CACZ,CACI2C,IAAK,YACLC,MAAOjD,OAAOoC,eACdc,OAAQ,kBAEZ,CACIF,IAAK,cACLC,MAAOjD,OAAOuC,mBACdW,OAAQ,kBAEZ,CACIF,IAAK,aACLC,OAAO,EACPC,OAAQ,0BAGhB5B,UAAU,SACVL,QAAQY,EAAEC,KAAKC,WAAW,iBAAkB,kBAAmB,SAC/DP,iBAAiB,QAAS,sBACPrB,YAAYE,UAInCD,eACiBQ,iBAEjBR,cACQ+C,YAlLyBC,WAkLgBvB,EAAEC,KAAKC,WAAW,QAAS,6DAAmB,sEAjLsBqB,6BADpFA,eAoLzBC,gDAA2CxB,EAAEC,KAAKC,WAAW,kBAAmB,8CAElFhC,+BAA+BuD,QAAQjC,OAAOgC,KAAOF,YACvDlD,kBAAmB,kBASP,WACVsD,KAAOC,SAASC,eAAe,mBAErCzD,OAAOoC,gBAAiB,mBAAErC,0BAA0B2D,MAAMC,OAE1D3D,OAAOuC,oBAAqB,mBAAExC,8BAA8B2D,MAAMC,OAElEC,0BACAL,KAAKM,iBAAiB,UAAUzD,MAAAA,IAC5B0D,EAAEC,uBAGIlD,OAASiD,EAAEE,OAAOC,cAAc,qBAAqBC,aAAa,eAE1D,cAAVrD,cACMsD,0BAGI,WAAVtD,QAEA+C,iDAKNJ,UAAUY,GAAG,QAASrE,6BAA6BK,gBAE5BiE,mBAGjBC,OAAOC,SAASC,mBAWtBZ,wBAA0BxD,UAC5BJ,OAAOiC,4BAA8BwC,yBAErCzE,OAAOoC,gBAAiB,mBAAErC,0BAA0B2D,MAAMC,OAE1D3D,OAAOuC,oBAAqB,mBAAExC,8BAA8B2D,MAAMC,OAC9D3D,OAAOoC,gBAAkBpC,OAAOuC,mCAExBmC,mBAEK,MAAMC,QAAQ/C,gBACf8C,iBAAmBC,OAEzB,MAAOC,yCACQC,gBAAgB,CACzB9B,6CAAuC6B,MAAM7B,SAC7C+B,KAAM,gBAcpBX,wBAA0B/D,gBAEtB2E,YAAcC,eAAMC,OAAO,CAC7BC,MAAO,2BAEPxC,KAAM,8CACNyC,OAAQ,mFACRC,MAAM,EACNC,eAAe,WAGnBN,MAAMK,OAECL,oCAGwB3E,MAAOkF,QAASC,mBAC3CC,WAAa,CACb,CACIxC,IAAK,YACLC,MAAOqC,QACPpC,OAAQ,kBAEZ,CACIF,IAAK,cACLC,MAAOsC,YACPrC,OAAQ,yBAKVf,gBAAWmD,uCAGXjD,SAAW,IAAIC,SACrBD,SAAShB,OAAO,UAAWkE,aAC3BlD,SAAShB,OAAO,aAAc,mCAC9BgB,SAAShB,OAAO,qBAAsB,QAGtCmB,MAAML,MAAO,CACTM,OAAQ,OACRC,KAAML,WAELoD,MAAKhF,UAAYA,SAASmC,SAC1B6C,MAAKC,WACW,IAATA,WAgBAF,WAAWG,KAAK,CACZ3C,IAAK,aACLC,OAAO,EACPC,OAAQ,mBAEZ/C,YAAYqF,YACN,IAAI3C,MAAM,qBArBhB2C,WAAWG,KAAK,CACZ3C,IAAK,aACLC,OAAO,EACPC,OAAQ,mBAEZ/C,YAAYqF,kCACCX,gBAAgB,CACzB9B,QAAS,wBACT+B,KAAM,YAGVc,YAAW,KACPtB,OAAOC,SAASC,WACjB,QAWVqB,OAAMjB,QACHY,WAAWG,KAAK,CACZ3C,IAAK,aACLC,OAAO,EACPC,OAAQ,mBAEZ/C,YAAYqF,kCACCX,gBAAgB,CACzB9B,QAAS,sBAAwB6B,MAAM7B,QACvC+B,KAAM,oBAaTT,gBAAkBjE,SAmBpBD,YAlBU,CACb,CACI6C,IAAK,YACLC,OAAO,EACPC,OAAQ,kBAEZ,CACIF,IAAK,cACLC,OAAO,EACPC,OAAQ,kBAEZ,CACIF,IAAK,aACLC,OAAO,EACPC,OAAQ,mEAWduB,uBAAyBrE,gBACrBE,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFK,OAAQ,4BACRC,OAAQC,KAAKC,UAAU,mBAIRN,cAAKC,KAAK,CAACL,UAAU"}