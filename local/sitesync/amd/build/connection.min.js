define("local_sitesync/connection",["exports","jquery","core/ajax","core/notification","core/modal"],(function(_exports,_jquery,_ajax,_notification,_modal){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * @module     local_sitesync/connection
   * @copyright (c) 2020 WisdmLabs (https://wisdmlabs.com/)
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.saveConfigs=_exports.resetConnection=_exports.remUiActiveState=_exports.init=_exports.getSyncConfigs=_exports.getConnectionStatus=_exports.establishConnection=void 0,_jquery=_interopRequireDefault(_jquery),_ajax=_interopRequireDefault(_ajax),_notification=_interopRequireDefault(_notification),_modal=_interopRequireDefault(_modal);var SELECTORS_REMOVE_CONNECTION="#removeConnection",SELECTORS_INPUT_SITE_URL="#site-url",SELECTORS_INPUT_ACCESS_TOKEN="#access-token",SELECTORS_FORM_ACTION_WRAPPER=".form-action-wrapper",CONFIG={TEST_CONNECTION_URL:"/webservice/rest/server.php",SLAVE_SITE_URL:!1,SLAVE_ACCESS_TOKEN:!1,SLAVE_VALIDATION_DATA:!1};let connectionstatus=!1,remuiActivestate=!0;_exports.getConnectionStatus=()=>connectionstatus;_exports.remUiActiveState=()=>remuiActivestate;const saveConfigs=async function(){let configs=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];const request={methodname:"local_sitesync_save_config",args:{configs:configs}},response=await _ajax.default.call([request])[0];return response};_exports.saveConfigs=saveConfigs;const getSyncConfigs=async()=>{const request={methodname:"local_sitesync_do_sync_action",args:{action:"get_sync_configs",config:JSON.stringify({})}};return await _ajax.default.call([request])[0]};function addStep(steptext,stepdata){var stephtml='<li class="d-flex align-items-center mb-3 step step-loading" data-step="'.concat(stepdata,'">\n                    <span class="step-status mr-2">\n                        <span class="loading-spinner spinner-border spinner-border-sm" role="status"></span>\n                        <i class="fa fa-check text-success"></i>\n                        <i class="fa fa-times text-danger"></i>\n                    </span>\n                    <span class="step-text">').concat(steptext,"</span>\n                </li>");(0,_jquery.default)(".connection-steps .list-unstyled").append(stephtml)}function clearStep(stepdata){(0,_jquery.default)('.step[data-step="'+stepdata+'"]').remove()}function updateStepStatus(stepdata,status){(0,_jquery.default)('.step[data-step="'+stepdata+'"]').removeClass("step-loading step-success step-failure").addClass(status)}_exports.getSyncConfigs=getSyncConfigs;const connectionSteps=[async()=>{clearStep("step1"),addStep(M.util.get_string("chekingconnection","local_sitesync"),"step1");let slaveValidationData=CONFIG.SLAVE_VALIDATION_DATA;slaveValidationData=JSON.parse(slaveValidationData);const wsUrl="".concat(CONFIG.SLAVE_SITE_URL,"/webservice/rest/server.php"),formData=new FormData;formData.append("wstoken",CONFIG.SLAVE_ACCESS_TOKEN),formData.append("wsfunction","local_sitesync_check_connection"),formData.append("moodlewsrestformat","json");const response=await fetch(wsUrl,{method:"POST",body:formData}),result=await response.json();if(!result)throw clearStep("step1"),updateStepStatus("step1","step-failure"),new Error("Connection validation failed");return clearStep("step1"),addStep(M.util.get_string("connectioncheckdone","local_sitesync"),"step1"),updateStepStatus("step1","step-success"),result},async()=>{clearStep("step2"),addStep(M.util.get_string("chekingcompatibility","local_sitesync"),"step2");const wsUrl="".concat(CONFIG.SLAVE_SITE_URL,"/webservice/rest/server.php");let slaveValidationData=CONFIG.SLAVE_VALIDATION_DATA;const formData=new FormData;formData.append("wstoken",CONFIG.SLAVE_ACCESS_TOKEN),formData.append("wsfunction","local_sitesync_compatibility_checker"),formData.append("moodlewsrestformat","json"),formData.append("action","check_master_server_compaibility"),formData.append("config",slaveValidationData);const response=await fetch(wsUrl,{method:"POST",body:formData});let result=await response.json();if(result=JSON.parse(result),!result.status){if("is_remui_active"!=result.failedkey)throw clearStep("step2"),addStep(result.message,"step2"),updateStepStatus("step2","step-failure"),new Error("Connection failed");remuiActivestate=!1}return clearStep("step2"),addStep(M.util.get_string("compatibilitycheckdone","local_sitesync"),"step2"),updateStepStatus("step2","step-success"),result},async()=>{clearStep("step3"),addStep(M.util.get_string("checkingservervalidity","local_sitesync"),"step3");const configs=[{key:"moodleurl",value:CONFIG.SLAVE_SITE_URL,plugin:"local_sitesync"},{key:"accesstoken",value:CONFIG.SLAVE_ACCESS_TOKEN,plugin:"local_sitesync"},{key:"connection",value:!0,plugin:"local_sitesync"}];return clearStep("step3"),addStep(M.util.get_string("servalidatated","local_sitesync"),"step3"),updateStepStatus("step3","step-success"),await saveConfigs(configs)},async()=>await getSyncConfigs(),async()=>{let buttonhtml=(buttontext=M.util.get_string("reset","local_sitesync"),'<button type="submit" class="btn '.concat("btn-outline-danger",' formaction" data-action="disconnect">').concat(buttontext,"</button>"));var buttontext;let text='<p class="text-success m-0 mb-2">'.concat(M.util.get_string("connectedstatus","local_sitesync"),"</p>");(0,_jquery.default)(SELECTORS_FORM_ACTION_WRAPPER).empty().append(text+buttonhtml),connectionstatus=!0}];_exports.init=()=>{const form=document.getElementById("Connection-form");CONFIG.SLAVE_SITE_URL=(0,_jquery.default)(SELECTORS_INPUT_SITE_URL).val().trim(),CONFIG.SLAVE_ACCESS_TOKEN=(0,_jquery.default)(SELECTORS_INPUT_ACCESS_TOKEN).val().trim(),initiateConnectionSteps(),form.addEventListener("submit",(async e=>{e.preventDefault();const action=e.target.querySelector("button.formaction").getAttribute("data-action");"disconnect"==action&&await reset_confirmaton_modal(),"connect"==action&&initiateConnectionSteps()})),(0,_jquery.default)(document).on("click",SELECTORS_REMOVE_CONNECTION,(async()=>{await resetConnection()&&window.location.reload()}))};const initiateConnectionSteps=async()=>{CONFIG.SLAVE_VALIDATION_DATA=await getSlaveValidationData(),CONFIG.SLAVE_SITE_URL=(0,_jquery.default)(SELECTORS_INPUT_SITE_URL).val().trim(),CONFIG.SLAVE_ACCESS_TOKEN=(0,_jquery.default)(SELECTORS_INPUT_ACCESS_TOKEN).val().trim(),CONFIG.SLAVE_SITE_URL&&CONFIG.SLAVE_ACCESS_TOKEN&&(async()=>{let stepResult;try{for(const step of connectionSteps)stepResult=await step()}catch(error){return void _notification.default.addNotification({message:"Connection process failed: ".concat(error.message),type:"error"})}})()},reset_confirmaton_modal=async()=>{const modal=await _modal.default.create({title:"Confirm connection reset",body:"<p>Are you sure you want to disconnect?</p>",footer:'<button type="button" class="btn btn-primary" id="removeConnection">Yes</button>',show:!0,removeOnClose:!0});return modal.show(),modal};_exports.establishConnection=async(siteUrl,accessToken)=>{var configdata=[{key:"moodleurl",value:siteUrl,plugin:"local_sitesync"},{key:"accesstoken",value:accessToken,plugin:"local_sitesync"}];const wsUrl="".concat(siteUrl,"/webservice/rest/server.php"),formData=new FormData;formData.append("wstoken",accessToken),formData.append("wsfunction","local_sitesync_check_connection"),formData.append("moodlewsrestformat","json"),fetch(wsUrl,{method:"POST",body:formData}).then((response=>response.json())).then((data=>{if(!0!==data)throw configdata.push({key:"connection",value:!1,plugin:"local_sitesync"}),saveConfigs(configdata),new Error("Connection failed");configdata.push({key:"connection",value:!0,plugin:"local_sitesync"}),saveConfigs(configdata),_notification.default.addNotification({message:"Connection successful",type:"success"}),setTimeout((()=>{window.location.reload()}),200)})).catch((error=>{configdata.push({key:"connection",value:!1,plugin:"local_sitesync"}),saveConfigs(configdata),_notification.default.addNotification({message:"Connection failed: "+error.message,type:"error"})}))};const resetConnection=async()=>saveConfigs([{key:"moodleurl",value:!1,plugin:"local_sitesync"},{key:"accesstoken",value:!1,plugin:"local_sitesync"},{key:"connection",value:!1,plugin:"local_sitesync"}]);_exports.resetConnection=resetConnection;const getSlaveValidationData=async()=>{const request={methodname:"local_sitesync_compatibility_checker",args:{action:"get_slave_validation_data",config:JSON.stringify({})}};return await _ajax.default.call([request])[0]}}));

//# sourceMappingURL=connection.min.js.map