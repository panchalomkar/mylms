{"version":3,"file":"sync_form.min.js","sources":["../src/sync_form.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     local_sitesync/sync_form\n * @copyright (c) 2020 WisdmLabs (https://wisdmlabs.com/)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/modal', 'core/notification', 'local_sitesync/connection', 'core/toast'], function($, ajax, Modal, Notification, Connection, Toast) {\n\n    var SELECTORS = {\n        \"GENERATE_KEY_BTN\": '#generateKey',\n        \"SECURE_KEY_INPUT\": '#secureKeyInput',\n        \"COPY_KEY_BTN\": '#secureKeyGroup .copyicon',\n        \"START_SYNC_BTN\": '#startSync',\n        \"SELECT_ALL\": 'input[name=\"select_all\"]',\n        \"CONFIG_INPUT\": '#ConfigSelector .configinput',\n        \"ADD_PUBLIC_KEY\": '#addPublicKey',\n        \"PUBLIC_KEY_INPUT\": \"#publicKeyInput\",\n        \"USER_NOTIFICATION\": '#region-main #user-notifications',\n        \"SYNC_PROGRESS_TRACKER\": '.syncprogresstracker',\n        \"NAV_TABS_LINK\": '.local_sitesync .nav-tabs .nav-link',\n        \"NO_CONNECTION_OVERLAY\": '.no-connection-overlay',\n    };\n\n    const registerEvents = () => {\n        $(SELECTORS.GENERATE_KEY_BTN).on('click', () => {\n            // SELECTORS.GENERATE_KEY_BTN.disabled = true;\n            ajax.call([{\n                methodname: 'local_sitesync_generate_keys',\n                args: {},\n                done: (response) => {\n                    $(SELECTORS.SECURE_KEY_INPUT).val(response.publickey);\n                    var msg = M.util.get_string('keygeneratedsuccessfully', 'local_sitesync');\n                    Toast.add(msg, {\n                        delay: 3000,\n                        closeButton: true,\n                        type: 'success sitesync_key_toast'\n                    });\n                },\n                fail: () => {\n                    // Re-enable button on error\n                    SELECTORS.GENERATE_KEY_BTN.disabled = false;\n                }\n            }]);\n        });\n\n        $(SELECTORS.COPY_KEY_BTN).on('click', function() {\n            var clipboardText = \"\";\n            clipboardText = $(SELECTORS.SECURE_KEY_INPUT).val();\n\n            const temp = $(\"<textarea>\");\n            $(\"body\").append(temp);\n            temp.val(clipboardText).select();\n            document.execCommand(\"copy\");\n            temp.remove();\n\n            var msg = M.util.get_string('textcopied', 'local_sitesync');\n            Toast.add(msg, {\n                delay: 3000,\n                closeButton: true,\n                type: 'warning sitesync_key_toast'\n            });\n            // navigator.clipboard.writeText(clipboardText);\n            // alert(\"Copied to Clipboard\");\n        });\n\n        $(SELECTORS.SELECT_ALL).on('click', function() {\n            var isChecked = $(this).is(':checked');\n            var checkboxes = $(SELECTORS.CONFIG_INPUT);\n            checkboxes.prop('checked', isChecked);\n        });\n\n        $(SELECTORS.CONFIG_INPUT).on('click', function() {\n            var checkboxes = $(SELECTORS.CONFIG_INPUT);\n            $(SELECTORS.SELECT_ALL).prop('checked', checkboxes.length === checkboxes.filter(':checked').length);\n        });\n\n        $(SELECTORS.START_SYNC_BTN).on('click', async() => {\n            await setupSyncEnvironment();\n        });\n\n        $(document).on('keyup', SELECTORS.PUBLIC_KEY_INPUT, function() {\n            const inputValue = $(this).val().trim();\n            $(SELECTORS.ADD_PUBLIC_KEY).prop('disabled', inputValue === '');\n        });\n        $(document).on('click', `${SELECTORS.ADD_PUBLIC_KEY}`, async() => {\n            if (input_public_key_modal) {\n\n                let masterkey = $(SELECTORS.PUBLIC_KEY_INPUT).val();\n\n                var configdata = {\n                    key: 'master_secret_pub_key',\n                    value: masterkey,\n                    plugin: 'local_sitesync'\n                };\n\n                await Connection.saveConfigs([configdata]);\n\n                input_public_key_modal.destroy();\n\n                let syncconfig = await Connection.getSyncConfigs();\n\n                syncconfig = JSON.parse(syncconfig);\n\n                sync_start(syncconfig.masterkey);\n            }\n        });\n\n        $(SELECTORS.NAV_TABS_LINK).on('click', async() => {\n            if (Connection.getConnectionStatus()) {\n                $(SELECTORS.NO_CONNECTION_OVERLAY).addClass('d-none');\n            } else {\n                $(SELECTORS.NO_CONNECTION_OVERLAY).removeClass('d-none');\n            }\n        });\n\n\n\n    };\n\n    /**\n     * Starts the synchronization process for the selected configurations on the master site.\n     *\n     * @param {string} masterkey - The master secret public key.\n     * @returns {Promise} A promise that resolves when the sync is complete.\n     */\n    const sync_start = async(masterkey) => {\n\n        $(SELECTORS.START_SYNC_BTN).attr('disabled', 'disabled');\n\n        let themesyncdata = await prepareSyncData(masterkey);\n\n        if (themesyncdata) {\n\n            themesyncdata = JSON.parse(themesyncdata);\n\n            let args = {\n                \"action\": \"sync_settings_on_master\",\n                \"config\": JSON.stringify({\n                    \"themeselectedConfigs\": themesyncdata,\n                    \"pluginname\": \"theme_remui\",\n                    \"masterkey\": masterkey,\n                }),\n            };\n\n            // eslint-disable-next-line no-undef\n            if (connectionstatus) {\n\n                let serverconfig = await Connection.getSyncConfigs();\n\n\n                $(SELECTORS.USER_NOTIFICATION).empty();\n\n                await get_notification(M.util.get_string('syncinprogress', 'local_sitesync'), 'warning');\n\n                $(SELECTORS.SYNC_PROGRESS_TRACKER).removeClass('d-none');\n\n                await syncSettingsOnMaster(JSON.parse(serverconfig), args);\n\n\n\n            } else {\n                $(SELECTORS.USER_NOTIFICATION).empty();\n                await get_notification(M.util.get_string('mastersitenotavailable', 'local_sitesync'), 'danger');\n            }\n        } else {\n            $(SELECTORS.USER_NOTIFICATION).empty();\n            await get_notification(M.util.get_string('noconfigurationselected', 'local_sitesync'), 'danger');\n\n        }\n\n    };\n\n    const prepareSyncData = async(masterkey) => {\n        let selectedConfigs = [];\n        // Get only checked config inputs\n        selectedConfigs = $(SELECTORS.CONFIG_INPUT + ':checked').map(function () {\n            return $(this).attr('name');\n        }).get();\n        if (!selectedConfigs.length) {\n            return false;\n        }\n\n        const request = {\n            methodname: 'local_sitesync_do_sync_action',\n            args: {\n                action: \"prepare_sync_data\",\n                config: JSON.stringify({\n                    \"themeselectedConfigs\": selectedConfigs,\n                    'pluginname': \"theme_remui\",\n                    \"masterkey\": masterkey\n                })\n\n            }\n        };\n\n        const response = await ajax.call([request])[0];\n        return response;\n    };\n\n    const get_notification = async(message, type) => {\n        await Notification.addNotification({\n            message: message,\n            type: type\n        });\n    };\n\n    /**\n     * Synchronizes settings on the master site.\n     *\n     * @param {Object} serverconfig - The server configuration object.\n     * @param {Object} args - The arguments object.\n     * @returns {Promise} A promise that resolves when the sync is complete.\n     */\n\n    const syncSettingsOnMaster = async(serverconfig, args) => {\n        // Build the web service URL\n\n        const progress = (baseprogress) => baseprogress + (Date.now() % 5);\n\n        updateProgress(0);\n\n        const wsUrl = `${serverconfig.siteurl}/webservice/rest/server.php`;\n\n        // Create form data for the request\n        const formData = new FormData();\n        formData.append('wstoken', serverconfig.accesstoken);\n        formData.append('wsfunction', 'local_sitesync_do_sync_action');\n        formData.append('moodlewsrestformat', 'json');\n        formData.append('action', args.action);\n        formData.append('config', args.config);\n\n        updateProgress(progress(10));\n\n        // Make the request to external site\n        fetch(wsUrl, {\n            method: 'POST',\n            body: formData\n        })\n            .then(response => {\n                updateProgress(progress(60));\n                return response.json();\n            })\n            .then(async(data) => {\n                updateProgress(progress(75));\n                let responsedata = JSON.parse(data);\n                if (responsedata.status == \"success\") {\n\n                    updateProgress(100);\n\n                     $(SELECTORS.START_SYNC_BTN).removeAttr('disabled');\n\n                    $(SELECTORS.USER_NOTIFICATION).empty();\n\n                    get_notification(M.util.get_string('synccompleted', 'local_sitesync'), 'success');\n\n                    if (!Connection.remUiActiveState()) {\n                        get_notification(M.util.get_string('remuinotactivenotification', 'local_sitesync'), 'warning');\n                    }\n\n                    setTimeout(() => {\n                        $(\".typeform-wrapper button.typeform-init-button\").click();\n                    }, 1000);\n\n                } else {\n                    get_notification(responsedata.message, 'danger');\n                    master_public_key = false;\n                    $(SELECTORS.START_SYNC_BTN).removeAttr('disabled');\n\n                    var configdata = [{\n                        key: 'master_secret_pub_key',\n                        value: \" \",\n                        plugin: 'local_sitesync'\n                    }];\n                    await Connection.saveConfigs(configdata);\n                }\n                return true;\n            }).catch(error => {\n                Notification.addNotification({\n                    message: 'Something went wrong ' + error.message + ' Please try again later.',\n                    type: 'error'\n                });\n            });\n    };\n\n    let input_public_key_modal = false;\n    /**\n     * Triggers the display of a modal dialog to allow the user to enter a public key.\n     *\n     * @async\n     * @returns {Promise<Modal>} The created modal dialog instance.\n     */\n    const trigger_input_public_key = async() => {\n\n        const modal = await Modal.create({\n            title: `${M.util.get_string('addpublickeyinfo2', 'local_sitesync')}`,\n            // eslint-disable-next-line max-len\n            body: `<p>${M.util.get_string('addpublickeyinfo', 'local_sitesync')}</p><input type=\"password\" id=\"publicKeyInput\" class=\"form-control\" placeholder=\"Secret public key\"  required/>`,\n            footer: `<button type=\"button\" class=\"btn btn-primary\" id=\"addPublicKey\" disabled>${M.util.get_string('startsyncbtntext', 'local_sitesync')}</button>`,\n            show: true,\n            removeOnClose: true,\n        });\n\n        modal.show();\n\n        return modal;\n    };\n\n    /**\n     * Updates the progress bar element with the given progress value.\n     *\n     * @param {number} progress - The progress value, expressed as a percentage.\n     */\n    const updateProgress = (progress) => {\n        $(`${SELECTORS.SYNC_PROGRESS_TRACKER} .progress-bar`)\n            .css('width', progress + '%')\n            .attr('aria-valuenow', progress)\n            .text(progress + '%');\n    };\n\n\n    /**\n     * Sets up the sync environment by either triggering the input public key modal  or starting the sync process.\n     *\n     * If the `master_public_key` is not set, it will trigger the display of a modal dialog to allow the user to enter a public key.\n     * Otherwise, it will trigger the start of the sync process using the `master_public_key`.\n     *\n     * @async\n     */\n\n    const setupSyncEnvironment = async () => {\n        // eslint-disable-next-line no-undef\n\n        if (!Connection.getConnectionStatus()) {\n\n            Notification.addNotification({\n                message: `Cannot stat sync process no connection found`,\n                type: 'error'\n            });\n\n            throw new Error('Cannot start sync process no connection found');\n        }\n\n        if (!master_public_key) {\n            input_public_key_modal = await trigger_input_public_key();\n        } else {\n            sync_start(master_public_key);\n        }\n    };\n\n    const init = () => {\n\n        registerEvents();\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","ajax","Modal","Notification","Connection","Toast","SELECTORS","registerEvents","GENERATE_KEY_BTN","on","call","methodname","args","done","response","SECURE_KEY_INPUT","val","publickey","msg","M","util","get_string","add","delay","closeButton","type","fail","disabled","COPY_KEY_BTN","clipboardText","temp","append","select","document","execCommand","remove","SELECT_ALL","isChecked","this","is","CONFIG_INPUT","prop","checkboxes","length","filter","START_SYNC_BTN","async","setupSyncEnvironment","PUBLIC_KEY_INPUT","inputValue","trim","ADD_PUBLIC_KEY","input_public_key_modal","configdata","key","value","plugin","saveConfigs","destroy","syncconfig","getSyncConfigs","JSON","parse","sync_start","masterkey","NAV_TABS_LINK","getConnectionStatus","NO_CONNECTION_OVERLAY","addClass","removeClass","attr","themesyncdata","prepareSyncData","stringify","connectionstatus","serverconfig","USER_NOTIFICATION","empty","get_notification","SYNC_PROGRESS_TRACKER","syncSettingsOnMaster","selectedConfigs","map","get","request","action","config","message","addNotification","progress","baseprogress","Date","now","updateProgress","wsUrl","siteurl","formData","FormData","accesstoken","fetch","method","body","then","json","responsedata","data","status","removeAttr","remUiActiveState","setTimeout","click","master_public_key","catch","error","css","text","Error","modal","create","title","footer","show","removeOnClose","trigger_input_public_key","init"],"mappings":"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"}