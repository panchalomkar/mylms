{"version":3,"file":"color-utils.min.js","sources":["../../src/customizer/color-utils.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Theme customizer color utils js. Provide functionality to manupulate colors.\n * @copyright (c) 2023 WisdmLabs (https://wisdmlabs.com/) <support@wisdmlabs.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author    Yogesh Shirsath\n */\n\nclass ColorUtils {\n    /**\n     * Convert hex color code to rgb.\n     * @param {string} hex Hex color value\n     * @returns {object}\n     */\n    hexToRgb(hex) {\n        let result;\n        hex = hex.split('#');\n        hex = hex[hex.length - 1];\n        if (hex.length == 6) {\n            result = /^([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        } else if (hex.length == 3) {\n            result = /^([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\n            result[1] += result[1];\n            result[2] += result[2];\n            result[3] += result[3];\n        }\n        return result ? {\n            red: parseInt(result[1], 16),\n            green: parseInt(result[2], 16),\n            blue: parseInt(result[3], 16)\n        } : {\n            red: 0,\n            green: 0,\n            blue: 0\n        };\n    }\n\n    /**\n     * Pad a hexadecimal string with zeros if it needs it.\n     * @param {number} number Hex number\n     * @returns {number} Hex\n     */\n    pad(number) {\n        var str = '' + number;\n        if (str.length < 2) {\n            str = '0' + str;\n        }\n        return str;\n    }\n\n    /**\n     * Convert rgb color to hex.\n     * @param {object} rgb Red, Green and blue color\n     * @returns {string} Hex color.\n     */\n    rgbToHex(rgb) {\n        rgb.red = this.pad(Math.min(Math.max(Math.round(rgb.red), 0), 255).toString(16));\n        rgb.green = this.pad(Math.min(Math.max(Math.round(rgb.green), 0), 255).toString(16));\n        rgb.blue = this.pad(Math.min(Math.max(Math.round(rgb.blue), 0), 255).toString(16));\n        return `#${rgb.red}${rgb.green}${rgb.blue}`;\n    }\n\n    /**\n     * Get shade of hex color.\n     * @param {object} rgb Red, Green and blue color\n     * @param {number} shade Shade number in percentage.\n     * @returns {object} rgb color.\n     */\n    rgbShade(rgb, shade) {\n        return {\n            red: rgb.red * (1 - 0.01 * shade),\n            green: rgb.green * (1 - 0.01 * shade),\n            blue: rgb.blue * (1 - 0.01 * shade)\n        };\n    }\n\n    /**\n     * Get tint of hex color.\n     * @param {object} rgb Red, Green and blue color\n     * @param {number} tint Tint number in percentage.\n     * @returns {string} rgb color\n     */\n    rgbTint(rgb, tint) {\n        return {\n            red: rgb.red + (255 - rgb.red) * tint * 0.01,\n            green: rgb.green + (255 - rgb.green) * tint * 0.01,\n            blue: rgb.blue + (255 - rgb.blue) * tint * 0.01\n        };\n    }\n\n    /**\n     * Get color shade.\n     * @param {string} color Hex color\n     * @param {number} shade Shade percentage.\n     * @returns {string} Hex color\n     */\n    shade(color, shade) {\n        return this.rgbToHex(this.rgbShade(this.hexToRgb(color), shade));\n    }\n\n    /**\n     * Get color tint.\n     * @param {string} color Hex color\n     * @param {number} tint  Tint percentage.\n     * @returns {string} Hex color\n     */\n    tint(color, tint) {\n        return this.rgbToHex(this.rgbTint(this.hexToRgb(color), tint));\n    }\n}\n\nexport default new ColorUtils();\n"],"names":["hexToRgb","hex","result","split","length","exec","red","parseInt","green","blue","pad","number","str","rgbToHex","rgb","this","Math","min","max","round","toString","rgbShade","shade","rgbTint","tint","color"],"mappings":"yKA6He;;;;;;;MAjGXA,SAASC,SACDC,cAGc,IADlBD,KADAA,IAAMA,IAAIE,MAAM,MACNF,IAAIG,OAAS,IACfA,OACJF,OAAS,0CAA0CG,KAAKJ,KACnC,GAAdA,IAAIG,SACXF,OAAS,0CAA0CG,KAAKJ,KACxDC,OAAO,IAAMA,OAAO,GACpBA,OAAO,IAAMA,OAAO,GACpBA,OAAO,IAAMA,OAAO,IAEjBA,OAAS,CACZI,IAAKC,SAASL,OAAO,GAAI,IACzBM,MAAOD,SAASL,OAAO,GAAI,IAC3BO,KAAMF,SAASL,OAAO,GAAI,KAC1B,CACAI,IAAK,EACLE,MAAO,EACPC,KAAM,GASdC,IAAIC,YACIC,IAAM,GAAKD,cACXC,IAAIR,OAAS,IACbQ,IAAM,IAAMA,KAETA,IAQXC,SAASC,YACLA,IAAIR,IAAMS,KAAKL,IAAIM,KAAKC,IAAID,KAAKE,IAAIF,KAAKG,MAAML,IAAIR,KAAM,GAAI,KAAKc,SAAS,KAC5EN,IAAIN,MAAQO,KAAKL,IAAIM,KAAKC,IAAID,KAAKE,IAAIF,KAAKG,MAAML,IAAIN,OAAQ,GAAI,KAAKY,SAAS,KAChFN,IAAIL,KAAOM,KAAKL,IAAIM,KAAKC,IAAID,KAAKE,IAAIF,KAAKG,MAAML,IAAIL,MAAO,GAAI,KAAKW,SAAS,gBACnEN,IAAIR,YAAMQ,IAAIN,cAAQM,IAAIL,MASzCY,SAASP,IAAKQ,aACH,CACHhB,IAAKQ,IAAIR,KAAO,EAAI,IAAOgB,OAC3Bd,MAAOM,IAAIN,OAAS,EAAI,IAAOc,OAC/Bb,KAAMK,IAAIL,MAAQ,EAAI,IAAOa,QAUrCC,QAAQT,IAAKU,YACF,CACHlB,IAAKQ,IAAIR,KAAO,IAAMQ,IAAIR,KAAOkB,KAAO,IACxChB,MAAOM,IAAIN,OAAS,IAAMM,IAAIN,OAASgB,KAAO,IAC9Cf,KAAMK,IAAIL,MAAQ,IAAMK,IAAIL,MAAQe,KAAO,KAUnDF,MAAMG,MAAOH,cACFP,KAAKF,SAASE,KAAKM,SAASN,KAAKf,SAASyB,OAAQH,QAS7DE,KAAKC,MAAOD,aACDT,KAAKF,SAASE,KAAKQ,QAAQR,KAAKf,SAASyB,OAAQD"}