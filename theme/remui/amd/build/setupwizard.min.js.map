{"version":3,"file":"setupwizard.min.js","sources":["../src/setupwizard.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable jsdoc/require-jsdoc*/\n/* eslint-disable jsdoc/require-jsdoc*/\n/* eslint-disable jsdoc/require-jsdoc*/\n/* eslint-disable no-loop-func*/\n/* eslint-disable no-unused-vars */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module setupwizard\n *\n * @module     theme_remui/setupwizard\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery', 'core/templates', 'core/ajax', 'core/notification', 'core/str', 'theme_remui/feedbackcollection'], function($, Templates, Ajax, Notification, Str, feedbackcollection) {\n\n    const SELECTORS = {\n        'SETUPMAIN_WRAPPER': '#setupmain-wrapper',\n        'NEXT_PAGE': '.setup-navigation .next-page',\n        'SETUP_ERROR': '.setupwizard-error-msg',\n        'SETUP_SUCCESS': '.setupwizard-success-msg',\n        'CHECKING_HEADING': '.check-requirements .checking',\n        'CONTINUESETUPBTN': '.continuesetup-btn',\n        'SETUPWIZARD_MODAL': '.setupwizard-modal',\n        \"LICENSEKEYINPUT\": '#licensekey-input',\n        \"LICENSESUBMITBTN\": '.license-submit-btn',\n        \"LICENSEACKMSG\": '.license-ack-msg',\n        'USERINFORMATION_FORM': '#user-information-form',\n        'USERINFORMATION_SUBMIT_BTN': '#user-information-form .btn[type=\"submit\"]',\n        'PLUGIN_INSTALLER': '#edwiser-plugin-installer-wrapper',\n        'INSTALLABLE_PLUGINS_WRAPPER': '.installable-plugins-wrapper',\n        'RESUMESETUPBTN':'#resume-setup',\n        'RETRYYOURSETUPBTN':'.sitesetup-retry .btn',\n        'SITESETUP_FEEDBACK':'#setupmain-wrapper .sitesetup-feedback',\n        'ACTIVATEREMUIBTN':'#activate-remui-btn',\n        'CLOSECURRENTWINDOW':'.close-current-window',\n        'SITESETUPLOADER':'.sitesetup-loader-container',\n        'SKIPSERVERCHECKBTN':'.skip-server-check',\n    };\n\n    const STEPSNAME = {\n        'SERVER_CHECK': 'servercheck',\n        'USER_INFORMATION': 'userinformation',\n        'LICENSE_ACTIVATION': 'licenseactivation',\n        'SITESETUP': 'sitesetup',\n        'FINAL': 'final',\n        'FINISHED': 'finished',\n    };\n\n    let setupwizardContext = null;\n    let installationQueue = [];\n    let installedPluginList = [];\n    const pluginProgressStatusTemplate = \"theme_remui/setupwizard/setup_plugin_progress_status\";\n    let allPluginInstallSuccess = true;\n    let modalInitialized = false;\n    let progressInterval = null;\n\n    // ****** IMPORTANT ******\n    // Do not change the sequence.\n    // If you want to add new strings here, add it at the bottom.\n    // Do not remove any string from the array.\n    // There is no way we can revert back if sequence is changed.\n    // ****** IMPORTANT ******\n    const strings = [\n        {key: 'checkingdone', component: 'theme_remui'},\n        {key: 'downloadsuccessmsg', component: 'theme_remui'},\n        {key: 'installsuccessmsg', component: 'theme_remui'},\n        {key: 'setratingreviewoncourse', component: 'theme_remui'},\n        {key: 'courseformatsetmsg', component: 'theme_remui'},\n        {key: 'setashomepage', component: 'theme_remui'},\n        {key: 'enablesuccessmsg', component: 'theme_remui'},\n        {key: 'ratingreviewaddedallcoursesmsg', component: 'theme_remui'},\n        {key: 'otherpagenotice', component: 'theme_remui'},\n        {key: 'downloadfailed', component: 'theme_remui'},\n        {key: 'tryagain', component: 'theme_remui'},\n        {key: 'somthingwentwrong', component: 'theme_remui'},\n    ];\n\n    var LANGS; // Gloabl variable to store languages.\n\n    // Functionality to fetch strings.\n    const fetchLanguages = () => {\n        Str.get_strings(strings).then(function(results) {\n            LANGS = results;\n            return results;\n        });\n    };\n\n    /**\n     * Asynchronously retrieves the setup wizard context from the server.\n     *\n     * @returns {Promise<Object>} The setup wizard context, or null if an error occurs.\n     */\n    const get_setupwizard_context = async () => {\n        return new Promise((resolve) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"get_setupwizard_context\",\n                    config: JSON.stringify({})\n                },\n                done: function(response) {\n                    setupwizardContext = JSON.parse(response);\n                    resolve(setupwizardContext);\n                },\n                fail: function(ex) {\n                    Notification.exception(ex);\n                    resolve(null);\n                }\n            }]);\n        });\n    };\n\n    /**\n     * Appends the rendered template to the specified parent selector.\n     *\n     * @param {string} parentSelector The CSS selector for the parent element to append the template to.\n     * @param {string} template The name of the template to render.\n     * @param {Object} context The context object to pass to the template renderer.\n     * @returns {Promise<void>} A promise that resolves when the template has been appended.\n     */\n    function append_template(parentSelector, template, context) {\n        return Templates.render(template, {\n            config: M.cfg,\n            ...context\n        }).done(function(html, js) {\n            Templates.appendNodeContents($(parentSelector), html, js);\n        });\n    }\n\n    function handle_add_retry_button() {\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER + \" .sitesetup-retry\",\n            pluginProgressStatusTemplate,\n            {\n                setupbtn: true,\n                btnclass: \"install-try-again btn btn-primary ml-auto\",\n                text: LANGS[10],\n            }\n        );\n        installationQueue = [];\n        installedPluginList = [];\n    }\n\n    function set_setup_status(step) {\n        return Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"set_setup_status\",\n                config: JSON.stringify({\n                    \"status\": step\n                })\n            }\n        }])[0];\n    }\n\n\n    async function send_usersiteinfo_to_edwiser(formData) {\n        return Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"send_usersiteinfo_to_edwiser\",\n                config: JSON.stringify({\n                    'usersiteinfo': formData\n                })\n            }\n        }])[0];\n    }\n\n\n    // ******************** PLUGIN INSTALLER EVENTSs start ******************* ***************************************\n\n\n\n    /**\n     * Handles the installation exception error for a plugin.\n     *\n     * @param {string} plugin The plugin identifier.\n     * @param {Error} ex The exception that occurred during installation.\n     * @returns {void}\n     */\n    function install_exception_error(plugin, ex) {\n        append_template(\n            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n            pluginProgressStatusTemplate,\n            {\n                exception: true,\n                id: plugin + \"-exception\",\n                message: \"something went wrong\",\n                exceptionmsg: ex.stack || ex.message || ex || \"Unknown error occurred\"\n            }\n        );\n        $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress\").remove();\n    }\n    /**\n     * Sets the default course format for the site.\n     *\n     * @param {string} plugin The plugin identifier.\n     * @returns {Promise<Object>} A promise that resolves with the response from the server, or null if an error occurs.\n     */\n    function setDefaultCourseFormat(plugin) {\n        return new Promise((resolve) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"set_default_course_format\",\n                    config: JSON.stringify({ })\n                },\n                done: function(response) {\n                    append_template(\n                        SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                        pluginProgressStatusTemplate,\n                        {\n                            success: true,\n                            message: LANGS[4]\n                        }\n                    );\n                    resolve(JSON.parse(response));\n                },\n                fail: function(ex) {\n                    Notification.exception(ex);\n                    resolve(null);\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Sets the pagebuilder for the homepage.\n     *\n     * @param {string} plugin The plugin identifier.\n     * @returns {Promise<Object>} A promise that resolves with the response from the server, or null if an error occurs.\n     */\n    function setPagebuilderForHomepage(plugin) {\n        return new Promise((resolve) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"set_pagebuilder_for_homepage\",\n                    config: JSON.stringify({ })\n                },\n                done: function(response) {\n                    append_template(\n                        SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                        pluginProgressStatusTemplate,\n                        {\n                            success: true,\n                            message: LANGS[5]\n                        }\n                    );\n                    resolve(JSON.parse(response));\n                },\n                fail: function(ex) {\n                    Notification.exception(ex);\n                    resolve(null);\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Enables Edwiser Page Builder filter plugin.\n     *\n     * @param {string} plugin The plugin identifier.\n     * @returns {Promise<Object>} A promise that resolves with the response from the server, or null if an error occurs.\n     */\n    function enableFilterplugin(plugin) {\n        return new Promise((resolve) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"enable_filterplugin\",\n                    config: JSON.stringify({ })\n                },\n                done: function(response) {\n                    append_template(\n                        SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                        pluginProgressStatusTemplate,\n                        {\n                            success: true,\n                            message: LANGS[6]\n                        }\n                    );\n                    resolve(JSON.parse(response));\n                },\n                fail: function(ex) {\n                    Notification.exception(ex);\n                    resolve(null);\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Sets the Edwiser Rating and Review plugin to all courses.\n     *\n     * This function adds the Edwiser Rating and Review plugin to all courses on the site.\n     * It first adds a loading class to the setup button\n     * If the AJAX call is successful, it removes the setup button and appends a success message\n     */\n    function set_ratingreview_to_allcourses() {\n        let setupbtn = $(this);\n        setupbtn.addClass(\"loading\");\n        setTimeout(() => {\n            Ajax.call([{\n                methodname: 'block_edwiserratingreview_add_plugin_to_course',\n                args: { userdeniedvalue: \"true\" },\n                done: function () {\n                    setupbtn.remove();\n                    append_template(\n                        SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #block_edwiserratingreview\" + \" .installation-status\",\n                        pluginProgressStatusTemplate,\n                        {\n                            success: true,\n                            message: LANGS[7]\n                        }\n                    );\n                },\n                fail: function (ex) {\n                    console.log(ex);\n                }\n            }]);\n        }, 500);\n    }\n\n    /**\n     * Performs setup tasks after the installation of plugins.\n     *\n     * This function is called after the installation of plugins. It performs the following tasks:\n     * - For the \"block_edwiserratingreview\" plugin, it appends a template with a \"Set Edwiser Rating and Review\" button.\n     * - For the \"format_remuiformat\" plugin, it sets the default course format.\n     * - For the \"local_edwiserpagebuilder\" plugin, it sets the page builder for the homepage.\n     * - For the \"filter_edwiserpbf\" plugin, it enables the filter plugin.\n     * - It removes the \"inprogress\" class from the installation status elements for each installed plugin.\n     *\n     * @param {Object} $data - The data returned from the plugin installation process.\n     */\n    function plugins_setup_after_installation($data) {\n\n        return new Promise((resolve) => {\n            installedPluginList.forEach(async (plugin) => {\n                if (plugin === \"block_edwiserratingreview\") {\n                    if (Number(setupwizardContext.isratingreviewaddedtocourses)) {\n                        append_template(\n                            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                            pluginProgressStatusTemplate,\n                            {\n                                success: true,\n                                message: LANGS[7]\n                            }\n                        );\n                    } else {\n                        append_template(\n                            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                            pluginProgressStatusTemplate,\n                            {\n                                setupbtn: true,\n                                btnclass: \"set-edwiserratingreview btn btn-secondary btn-sm\",\n                                text: LANGS[3],\n                            }\n                        );\n                    }\n                }\n\n                if (plugin === \"format_remuiformat\") {\n                    await setDefaultCourseFormat(plugin);\n                }\n\n                if (plugin === \"local_edwiserpagebuilder\" ) {\n                    await setPagebuilderForHomepage(plugin);\n                }\n\n                if (plugin === \"filter_edwiserpbf\" ) {\n                    await enableFilterplugin(plugin);\n                }\n\n                $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress\").remove();\n\n            });\n            resolve(null);\n        });\n    }\n\n    function remove_downloaded_zip_and_purge_cache(purgecache = true) {\n        return Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"remove_downloaded_zip_and_purge_cache\",\n                config: JSON.stringify({\n                    purgecache: purgecache\n                })\n            }\n        }])[0];\n    }\n\n\n    function downloadPlugins(retryCount = 1) {\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"plugin_download_handler\",\n                    config: JSON.stringify({\n                        plugins: setupwizardContext.pluginslist,\n                    })\n                },\n                done: function(updateResponse) {\n                    resolve(updateResponse);\n                },\n                fail: function(ex) {\n                    if (ex.errorcode === \"upgraderunning\" && retryCount < 6) {\n                        setTimeout(() => {\n                            downloadPlugins(retryCount + 1).then(resolve).catch(reject);\n                        },360000 * retryCount); // Wait 360 seconds before retrying\n                    }\n                    else if (retryCount < 4) {\n                        setTimeout(() => {\n                            downloadPlugins(retryCount + 1).then(resolve).catch(reject);\n                        }, 360000 * retryCount); // Wait 360 seconds before retrying\n                    } else {\n                        resolve([]);\n                    }\n                },\n            }]);\n        });\n    }\n\n    function get_installableplugin_list() {\n        return Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"get_installableplugin_list\",\n                config: JSON.stringify({})\n            }\n        }])[0];\n    }\n\n    function save_newplugin_settings(retryCount = 0) {\n\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"save_newplugin_settings\",\n                    config: JSON.stringify({})\n                },\n                done: function(updateResponse) {\n                    resolve(\"true\");\n                },\n                fail: function(ex) {\n                    if (ex.errorcode === \"upgraderunning\" && retryCount < 30) {\n                        setTimeout(() => {\n                            save_newplugin_settings(retryCount + 1).then(resolve).catch(reject); // Forward any errors\n                        }, 60000);  // Wait 60 seconds before retrying\n                    } else if (retryCount < 2) {\n                        save_newplugin_settings(retryCount + 1).then(resolve).catch(reject); // Forward any errors\n                    } else {\n                        resolve(null);\n                    }\n                }\n            }]);\n        });\n    }\n\n    /**\n     * Updates the database for the specified plugin.\n     *\n     * This function makes an AJAX call to the 'theme_remui_do_setup_action' method with the 'plugin_database_upgrader_handler' action.\n     * It will retry the database update up to 30 times if the site is being upgraded, and up to 3 times for other errors.\n     * If the database update is successful, it will append a success message to the plugin's installation status element and add the plugin to the installedPluginList.\n     * If there is an exception, it will call the install_exception_error function.\n     *\n     * @param {string} plugin - The name of the plugin to update the database for.\n     * @param {number} [retryCount=0] - The number of times the database update has been retried.\n     * @returns {Promise<any>} - A Promise that resolves with the database update response data.\n     */\n    async function updateDatabase(plugin, retryCount = 0) {\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"plugin_database_upgrader_handler\",\n                    config: JSON.stringify({})\n                },\n                done: function(updateResponse) {\n                    const updateData = JSON.parse(updateResponse);\n\n                    append_template(\n                        SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                        pluginProgressStatusTemplate,\n                        {\n                            success: true,\n                            message: LANGS[2]\n                        }\n                    );\n\n                    const progressValue = parseInt($(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress .inprogress-value\").text());\n                    if(progressValue < 45) {\n                        $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress .inprogress-value\").text(generateRandomNumber(45, 55));\n                    }\n\n\n                    installedPluginList.push(plugin);\n\n                    resolve(updateData);\n                },\n                fail: function(ex) {\n                    if (ex.errorcode === \"upgraderunning\" && retryCount < 30) {\n                        setTimeout(() => {\n                            updateDatabase(plugin, retryCount + 1).then(resolve).catch(reject);\n                        }, 60000); // Wait 60 seconds before retrying\n                    } else if (retryCount < 3) {\n                        setTimeout(() => {\n                            updateDatabase(plugin, retryCount + 1).then(resolve).catch(reject);\n                        }, 30000); // Wait 30 seconds before retrying\n                    } else {\n                        install_exception_error(plugin, ex);\n                    }\n                },\n                timeout: 3600000\n            }]);\n        });\n    }\n\n    /**\n     * Handles the installation of a plugin.\n     *\n     * @param {string} plugin - The name of the plugin to install.\n     * @param {string} url - The URL of the plugin zip file.\n     * @returns {Promise<any>} - A Promise that resolves with the installation response data.\n     */\n    function handlePluginInstallation(plugin, url) {\n        epb_blocks_setup_info_handler(plugin);\n        return new Promise((resolve, reject) => {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"plugin_install_handler\",\n                    config: JSON.stringify({ zipfile: url })\n                },\n                done: async function(installResponse) {\n                    const response = JSON.parse(installResponse);\n\n                    if (response.success) {\n                        await updateDatabase(plugin);\n                        epb_blocks_setup_info_handler(plugin, true);\n                    } else if (response.error || response.info) {\n                        append_template(\n                            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                            pluginProgressStatusTemplate,\n                            {\n                                error: response.error,\n                                info: response.info,\n                                message: response.message\n                            }\n                        );\n                    }\n\n                    if(response.error) {\n                        $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress\").remove();\n                        epb_blocks_setup_info_handler(plugin, true);\n                    }\n\n                    if (response.info) {\n                        const progressValue = parseInt($(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress .inprogress-value\").text());\n                        if(progressValue < 45) {\n                            $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress .inprogress-value\").text(generateRandomNumber(45, 55));\n                        }\n                        installedPluginList.push(plugin);\n                        epb_blocks_setup_info_handler(plugin, true);\n                    }\n\n                    resolve(response);\n                },\n                fail: function(ex) {\n                    install_exception_error(plugin, ex);\n                    resolve(null);\n                }\n            }]);\n        });\n    }\n\n\n    function queueInstallation(plugin, url) {\n        return new Promise((resolve) => {\n            installationQueue.push(() => handlePluginInstallation(plugin, url).then(resolve));\n            if (installationQueue.length === 1) {\n                processQueue();\n            }\n        });\n    }\n\n    async function processQueue() {\n        while (installationQueue.length > 0) {\n            await installationQueue[0]();\n            installationQueue.shift();\n        }\n    }\n\n    function generateRandomNumber(min = 1, max = 10) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function installation_progress_value_handler(min = null) {\n        // Clear any existing interval first\n        if (progressInterval) {\n            clearInterval(progressInterval);\n        }\n\n        const progressValues = $(\".inprogress .inprogress-value\");\n\n        if (progressValues.length > 0) {\n            // Run first iteration immediately\n            setTimeout(updateProgressValues, 2000);\n\n            // Then run every 30 seconds\n            progressInterval = setInterval(updateProgressValues, 15000);\n        }\n\n        function updateProgressValues() {\n            progressValues.each(function() {\n                const progressValue = parseInt($(this).text());\n\n                if (progressValue && progressValue < 85) {\n\n                    let nextValue = min ? Math.max(min, progressValue) : progressValue;\n                    $(this).text(generateRandomNumber(nextValue, nextValue + 5));\n\n                } else if (!progressValue) {\n\n                    $(this).text(generateRandomNumber(1, 5));\n                    $(this).siblings('.percentage-icon').removeClass(\"d-none\");\n\n                }\n            });\n        }\n    }\n\n    function epb_blocks_setup_info_handler(plugin, shouldremove = false) {\n        const epb_blocks_setup_info = $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" .\" + plugin + \"_setup-info\");\n        console.log({epb_blocks_setup_info});\n        if(epb_blocks_setup_info.length) {\n            if (shouldremove) {\n                epb_blocks_setup_info.addClass(\"d-none\");\n            } else {\n                epb_blocks_setup_info.removeClass(\"d-none\");\n            }\n        }\n    }\n\n    /**\n     * Handles the installation of plugins for the setup wizard.\n     *\n     * This function first downloads the available plugins, then iterates through them and queues the installation of each plugin.\n     * After all plugins have been installed, it calls the `plugins_setup_after_installation` function.\n     *\n     * @async\n     * @returns {Promise<void>} A promise that resolves when the plugin installation process is complete.\n     */\n    async function sitesetuphandler() {\n        try {\n            await remove_downloaded_zip_and_purge_cache(false);\n            const response = await downloadPlugins();\n            const data = JSON.parse(response);\n\n            // checking all pluigns has installed or not and accroding to it setting the status\n            if(Object.entries(data).length) {\n                for (const [plugin, url] of Object.entries(setupwizardContext.pluginslist)) {\n                    if (plugin in data) {\n                        await append_template(\n                            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                            pluginProgressStatusTemplate,\n                            {\n                                success: true,\n                                message: LANGS[1]\n                            }\n                        );\n\n\n                    } else {\n                        await append_template(\n                            SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .installation-status\",\n                            pluginProgressStatusTemplate,\n                            {\n                                error: true,\n                                message: LANGS[9],\n                            }\n                        );\n                        $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + \" #\" + plugin + \" .inprogress\").remove();\n                        allPluginInstallSuccess = false;\n                    }\n                }\n            }\n\n\n            if (Object.entries(data).length === 0 || Object.entries(setupwizardContext.pluginslist).length === 0) {\n\n                $(SELECTORS.INSTALLABLE_PLUGINS_WRAPPER).empty();\n                await append_template(\n                    SELECTORS.INSTALLABLE_PLUGINS_WRAPPER,\n                    pluginProgressStatusTemplate,\n                    {\n                        error: true,\n                        message: LANGS[11],\n                    }\n                );\n                handle_add_retry_button();\n\n            } else {\n\n                installation_progress_value_handler(25);\n\n                for (const [plugin, url] of Object.entries(data)) {\n                    await queueInstallation(plugin, url);\n                }\n\n                let save_newplugin_settings_response = await save_newplugin_settings();\n\n                await plugins_setup_after_installation(data);\n\n                $(SELECTORS.SITESETUPLOADER).removeClass(\"d-none\").addClass('d-flex');\n\n                if (progressInterval) {\n                    clearInterval(progressInterval);\n                }\n\n                if (Object.keys(setupwizardContext.pluginslist).length === installedPluginList.length && allPluginInstallSuccess) {\n                    await site_initial_theme_setup();\n                    $(SELECTORS.SETUPMAIN_WRAPPER + ' .setup-navigation').removeClass(\"d-none\").addClass(\"d-flex\");\n                } else {\n                    $(SELECTORS.SITESETUPLOADER).removeClass(\"d-flex\").addClass('d-none');\n                    handle_add_retry_button();\n                }\n\n            }\n\n        } catch (ex) {\n            Notification.exception(ex);\n        }\n    }\n\n    // ******************** PLUGIN INSTALLER EVENTSs END ********************\n\n\n    // ******************** SERVER CHECK START ********************\n    /**\n     * Handles the server check step of the setup wizard.\n     *\n     * This function is responsible for rendering the server check step of the setup wizard. It performs a server check.\n     * If all checks pass, it enables the \"Next\" button to allow the user to proceed to the next step.\n     */\n    function setup_servercheck() {\n        let template = 'theme_remui/setupwizard/setup_' + STEPSNAME.SERVER_CHECK;\n        $(SELECTORS.SETUPMAIN_WRAPPER).empty();\n\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER,\n            template,\n            setupwizardContext\n        ).then(() => {\n            sessionStorage.setItem('setup_step', STEPSNAME.SERVER_CHECK);\n\n            setTimeout(() => {\n                Ajax.call([{\n                    methodname: 'theme_remui_do_setup_action',\n                    args: {\n                        action: \"system_server_check\",\n                        config: JSON.stringify({})\n                    },\n                    done: function(response) {\n                        response = JSON.parse(response);\n\n                        $(SELECTORS.CHECKING_HEADING).text(LANGS[0]);\n\n                        Object.entries(response.requirechecks).forEach(([key, value]) => {\n                            $(\".\" + key + \" .loader\").addClass(\"d-none\");\n\n                            if (value) {\n                                $(\".\" + key + \" \" + SELECTORS.SETUP_SUCCESS).removeClass(\"d-none\").addClass(\"d-flex\");\n                            } else {\n                                if(key == 'writeaccesscheck') {\n                                    $(\".\" + key + \" \" + SELECTORS.SETUP_ERROR+ ' span').text(response.nonwriteablepluginsmsg);\n                                }\n                                $(\".\" + key + \" \" + SELECTORS.SETUP_ERROR).removeClass(\"d-none\").addClass(\"d-flex\");\n                            }\n                        });\n\n                        if (response.allchecks) {\n                            $(SELECTORS.NEXT_PAGE).removeClass(\"disabled\");\n                        }\n                    },\n                    fail: function(ex) {\n                        Notification.exception(ex);\n                    }\n                }]);\n            }, 800);\n        });\n    }\n    // ******************** SERVER CHECK END ********************\n\n\n\n    // ******************** USER INFORMATION START ********************\n\n    function setup_userinformation() {\n        let template = 'theme_remui/setupwizard/setup_' + STEPSNAME.USER_INFORMATION;\n        $(SELECTORS.SETUPMAIN_WRAPPER).empty();\n\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER,\n            template,\n            setupwizardContext\n        ).then(() => {\n            sessionStorage.setItem('setup_step', STEPSNAME.USER_INFORMATION);\n        });\n    }\n\n    /**\n     * Submits the user information form and saves the user's responses to the server.\n     *\n     * It collects the checked radio button values from the form,\n     * creates an array of question-answer pairs,\n     * and sends the data to the server using an AJAX call.\n     *\n     * After the data is saved, the function calls the `current_step_handler` function to move to the\n     * next step in the setup wizard.\n     *\n     * @param {Event} e - The submit event object.\n     */\n    async function submitUserInformation(e) {\n        e.preventDefault();\n\n        let formData = [];\n\n        const checkedInputs = $(SELECTORS.USERINFORMATION_FORM + ' input[type=\"radio\"]:checked');\n        for (const input of checkedInputs) {\n            const name = $(input).attr('name');\n            const question = $('.info-question[data-questionfor=\"' + name + '\"]').data('value');\n            let ans = $(input).val();\n\n            formData.push({\n                question: question,\n                answer: ans\n            });\n        }\n\n        Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"save_setup_info\",\n                config: JSON.stringify({\n                    'usersiteinfo': formData\n                })\n            },\n            done: function(response) {\n                response = JSON.parse(response);\n            },\n            fail: function(ex) {\n                Notification.exception(ex);\n            }\n        }]);\n\n        await send_usersiteinfo_to_edwiser(formData);\n\n        const nextStep = $(SELECTORS.USERINFORMATION_SUBMIT_BTN).data('nextstep');\n        nextPageHandler(\"\", nextStep);\n    }\n\n    /**\n     * Checks if all questions in the user information form have been answered.\n     * If all questions have been answered, it removes the 'disabled' class from the submit button.\n     */\n    function checkAllQuestionsAnswered() {\n        const totalQuestions = $(SELECTORS.USERINFORMATION_FORM).find('.info-question').length;\n        const answeredQuestions = $(SELECTORS.USERINFORMATION_FORM).find('input[type=\"radio\"]:checked').length;\n\n        if (answeredQuestions === totalQuestions) {\n            $(SELECTORS.USERINFORMATION_SUBMIT_BTN).removeClass('disabled');\n        } else if (!$(SELECTORS.USERINFORMATION_SUBMIT_BTN).hasClass('disabled')) {\n            $(SELECTORS.USERINFORMATION_SUBMIT_BTN).addClass('disabled');\n        }\n    }\n\n    /**\n     * Handles the event when a custom answer input field is changed.\n     *\n     * This function checks the value of the custom answer input field and updates the corresponding radio button in the user information form accordingly.\n     *\n     * After updating the radio button, the function calls `checkAllQuestionsAnswered()` to check if all questions in the user information form have been answered.\n     */\n    function checkCustomAnswerInput() {\n        let textInput = $(this);\n        let targetQuestionId = \"#\" + $(this).data('inputfor');\n        let targetQuestion = $(SELECTORS.USERINFORMATION_FORM + ' input[type=\"radio\"]' + targetQuestionId);\n\n        if (textInput.val().length > 0) {\n            targetQuestion.prop('checked', true);\n            targetQuestion.val(textInput.val());\n        } else {\n            targetQuestion.prop('checked', false);\n        }\n        checkAllQuestionsAnswered();\n    }\n    // ******************** USER INFORMATION END ********************\n\n\n\n    async function setup_licenseactivation() {\n        let template = 'theme_remui/setupwizard/setup_' + STEPSNAME.LICENSE_ACTIVATION;\n\n        await save_newplugin_settings();\n\n        $(SELECTORS.SETUPMAIN_WRAPPER).empty();\n\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER,\n            template,\n            setupwizardContext\n        ).then(() => {\n            if(setupwizardContext.licensekey){\n                licenseActivationHandler(setupwizardContext.licensekey,);\n            }\n            sessionStorage.setItem('setup_step', STEPSNAME.LICENSE_ACTIVATION);\n        });\n    }\n\n    async function setup_sitesetup() {\n        let template = 'theme_remui/setupwizard/setup_' + STEPSNAME.SITESETUP;\n        $(SELECTORS.SETUPMAIN_WRAPPER).empty();\n\n        let plugincontext = await get_installableplugin_list();\n        plugincontext = JSON.parse(plugincontext);\n        setupwizardContext.pluginslist = plugincontext?.pluginslist || [];\n        setupwizardContext.structuredpluginlist = plugincontext?.structuredpluginlist;\n\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER,\n            template,\n            setupwizardContext\n        ).then(() => {\n            sessionStorage.setItem('setup_step', STEPSNAME.SITESETUP);\n            installation_progress_value_handler();\n            sitesetuphandler();\n        });\n    }\n\n    function setup_final() {\n        let template = 'theme_remui/setupwizard/setup_' + STEPSNAME.FINAL;\n        $(SELECTORS.SETUPMAIN_WRAPPER).empty();\n\n        append_template(\n            SELECTORS.SETUPMAIN_WRAPPER,\n            template,\n            setupwizardContext\n        ).then(async () => {\n            sessionStorage.setItem('setup_step', STEPSNAME.FINAL);\n\n            await remove_downloaded_zip_and_purge_cache();\n        });\n    }\n\n    function setup_sitesetup_feedback(e) {\n        feedbackcollection.submit_feedback_handler(e);\n        set_setup_status(STEPSNAME.FINISHED);\n        window.location = M.cfg.wwwroot;\n    }\n\n    // ******************** IF RemUI didn't active then append this ********************\n    function add_activateremui_step(e) {\n        $(SELECTORS.SETUPMAIN_WRAPPER + \" .setup-container.loading-container\").remove();\n        $(SELECTORS.SETUPMAIN_WRAPPER + \" .setup-container\").removeClass(\"d-none\");\n    }\n\n    // ******************** PAGE STEPS HANDLERS START ********************\n\n    /**\n     * Handles the current step of the setup wizard.\n     *\n     * This function is responsible for rendering the appropriate setup wizard step based on the provided `nextstep` parameter.\n     *\n     * @param {string} nextstep - The identifier of the next step to be displayed in the setup wizard.\n     */\n    function current_step_handler(nextstep) {\n\n        switch (nextstep) {\n            case STEPSNAME.SERVER_CHECK:\n                setup_servercheck();\n                break;\n            case STEPSNAME.USER_INFORMATION:\n                setup_userinformation();\n                break;\n            case STEPSNAME.LICENSE_ACTIVATION:\n                setup_licenseactivation();\n                break;\n            case STEPSNAME.SITESETUP:\n                setup_sitesetup();\n                break;\n            case STEPSNAME.FINAL:\n                setup_final();\n                break;\n            default:\n                setup_licenseactivation();\n                break;\n        }\n    }\n\n    function nextPageHandler(e, nextstep = \"\") {\n        if(!nextstep) {\n            nextstep = $(this).data('nextstep');\n        }\n        set_setup_status(nextstep);\n        current_step_handler(nextstep);\n    }\n\n    /**\n     * Initializes the setup wizard by handling the current step.\n     *\n     * This function is responsible for setting the initial step of the setup wizard based on the stored setup step in the session storage.\n     * If no setup step is stored, it defaults to the 'SITESETUP' step.\n     */\n    function initializeWizard() {\n        let currentstep = sessionStorage.getItem('setup_step');\n        if (setupwizardContext.resumestep === STEPSNAME.FINAL || setupwizardContext.resumestep === STEPSNAME.FINISHED) {\n            current_step_handler(STEPSNAME.FINAL);\n        } else if (!currentstep && setupwizardContext.resumestep) {\n            if ( setupwizardContext.resumestep === STEPSNAME.SITESETUP) {\n                current_step_handler(STEPSNAME.SERVER_CHECK);\n            } else {\n                current_step_handler(setupwizardContext.resumestep);\n            }\n        } else {\n            current_step_handler(currentstep);\n        }\n    }\n\n    // ******************** PAGE STEPs HANDLERS END ********************\n\n\n    /**\n     * Handles the license activation process for the RemUI theme.\n     *\n     * This function is called when the user enters a license key and submits it for activation on setup wizard.\n     *\n     * @param {string} $licensekey - The license key entered by the user.\n     * @param {string} action - Opeartion associated with the method.\n     */\n    function licenseActivationHandler($licensekey, action = \"check\") {\n        Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"license_check\",\n                config: JSON.stringify({\n                    'licensekey': $licensekey,\n                    'operation': action\n                })\n            },\n            done: function(response) {\n                response = JSON.parse(response);\n                var textinfoclass = \"sucessinfo\";\n                if($(SELECTORS.LICENSEKEYINPUT)){\n                    $(SELECTORS.LICENSESUBMITBTN).removeClass(\"disabled\");\n                    $(SELECTORS.LICENSEKEYINPUT).removeClass(\"is-checking\");\n                }\n                if(response['licensestatus'] == \"Active\"){\n                    $(SELECTORS.LICENSEKEYINPUT).addClass(\"is-valid\").removeClass(\"is-invalid\");\n                    $(SELECTORS.LICENSESUBMITBTN).addClass(\"d-none\");\n                    $(SELECTORS.NEXT_PAGE).removeClass(\"d-none\");\n                }else{\n                    $(SELECTORS.LICENSEKEYINPUT).addClass(\"is-invalid\").removeClass(\"is-valid\");\n                    textinfoclass = \"failureinfo\";\n                }\n                if (response['alert']) {\n                    $(SELECTORS.LICENSEACKMSG).removeClass(\"d-none\").removeClass(\"sucessinfo failureinfo\").addClass(textinfoclass).html(response['alert']['text']);\n                } else if (response['licensestatus'] == \"Active\") {\n                    $(SELECTORS.LICENSEACKMSG).removeClass(\"d-none\").removeClass(\"failureinfo\").addClass(\"sucessinfo\").text(response['licensestatus']);\n                } else {\n                    $(SELECTORS.LICENSEACKMSG).removeClass(\"d-none\").removeClass(\"failureinfo\").addClass(\"failureinfo\").text(response['licensestatus']);\n                }\n            },\n            fail: function(ex) {\n                Notification.exception(ex);\n            }\n        }]);\n    }\n\n    /**\n     * Performs the initial setup for the RemUI theme, including setting up the homepage and custom pages.\n     *\n     * This function is responsible for the following tasks:\n     * - Calls the 'theme_remui_do_setup_action' AJAX method to perform the basic theme setup.\n     * - Checks if the Edwiser Page Builder plugin is installed and enabled.\n     * - If the Edwiser Page Builder plugin is available, it retrieves the layout information for the homepage and custom pages.\n     * - Sets the homepage layout using the 'local_edwiserpagebuilder_add_adv_block_layout' AJAX method.\n     * - Creates and publishes the custom pages using the 'local_edwiserpagebuilder_do_page_action' AJAX method.\n     * - Sets the page links in the footer using the 'set_pagelinks_in_footer' function.\n     * - Renders the page cards for the homepage and custom pages using the 'theme_remui/setupwizard/page_course_card' template.\n     *\n     * This function is called as part of the setup wizard initialization process.\n     */\n    function site_initial_theme_setup(){\n        return new Promise(function(resolve, reject) {\n            Ajax.call([{\n                methodname: 'theme_remui_do_setup_action',\n                args: {\n                    action: \"basic_theme_setup\",\n                    config: JSON.stringify({})\n                },\n                done: async function(response) {\n\n                    var data = JSON.parse(response);\n\n                    var pageinfo = \"\";\n\n                    var templatecontext = [];\n                    // Initialize the arrays first\n                    templatecontext[\"homepage\"] = [];\n                    templatecontext[\"otherpage\"] = [];\n\n                    var notices = [];\n                    notices[\"homepage\"] = false;\n                    notices[\"otherpage\"] = false;\n\n                    $(\".site-setup-elem-wraper\").removeClass(\"d-none\");\n\n                    for (const [key, value] of Object.entries(data[\"pluginsetup\"])) {\n                        setTimeout(() => {\n                            $(SELECTORS.SITESETUPLOADER).removeClass(\"d-flex\").addClass('d-none');\n                            $(\".site-setup-elem-wraper\").append(value);\n                        }, 1500);\n                    }\n\n                    setTimeout(async () => {\n                        if(data[\"edwiserpagebuilderexist\"]){\n\n                            var pageinfo = await get_layout_info(setupwizardContext[\"layouts\"]);\n\n                            pageinfo = JSON.parse(pageinfo);\n\n                            for (const [key, value] of Object.entries(pageinfo)) {\n                                if(key == \"homepage\"){\n                                    await set_home_page(value[\"layout\"]);\n                                    templatecontext[\"homepage\"].push(value);\n                                } else {\n\n                                    var pagedraftid = await set_custom_pages(value);\n                                    pagedraftid = JSON.parse(pagedraftid);\n\n                                    if(pagedraftid){\n                                       var pageid =  await publish_custom_pages(pagedraftid);\n                                       var pageurl =  M.cfg.wwwroot + '/local/edwiserpagebuilder/page.php?id=' + JSON.parse(pageid);\n                                       pageinfo[key][\"publishedpage\"] = pageurl;\n                                    }\n                                    templatecontext[\"otherpage\"].push(pageinfo[key]);\n                                    notices[\"otherpage\"] = LANGS[8];\n                                }\n                            }\n\n\n                            await set_pagelinks_in_footer(templatecontext[\"otherpage\"]);\n\n                            for (const [key, value] of Object.entries(templatecontext)){\n                                let template = 'theme_remui/setupwizard/page_course_card';\n                                let parentSelector = '.configuration-wrapper.'+key+\"setup .content\";\n                                $(parentSelector).empty();\n\n                                var context = [];\n                                context['pagecards'] = value;\n                                context[\"notice\"] = notices[key];\n                                await append_template(parentSelector, template, context);\n                            }\n\n                        } else {\n                            $('.configuration-wrapper.homepagesetup').remove();\n                            $('.configuration-wrapper.otherpagesetup').remove();\n                        }\n\n                        if(data[\"edwisersiteimporterexist\"]){\n\n                        }\n\n                        resolve(null);\n                    }, 2000);\n                },\n                fail: function(ex) {\n                    Notification.exception(ex);\n                    resolve(null);\n                }\n            }]);\n        });\n\n    }\n\n    /**\n     * Retrieves layout information based on the provided configuration.\n     *\n     * @param {Object} $config - The configuration object containing the layouts.\n     * @returns {Promise<Object>} - The layout information.\n     */\n    async function get_layout_info($config){\n        const request = {\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"get_layout_info\",\n                config: JSON.stringify($config)\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n    /**\n     * Sets the home page layout.\n     *\n     * @param {Object} blocklayout - The block layout configuration.\n     * @returns {Promise<Object>} - The result of the AJAX call.\n     */\n    async function set_home_page(blocklayout){\n        const request = {\n            methodname: 'local_edwiserpagebuilder_add_adv_block_layout',\n            args: {\n                layout: blocklayout,\n                pagetype: \"site-index\",\n                region: \"full-width-top\",\n                subpagetypepattern: null,\n                courseid: M.cfg.courseId,\n                contextinstanceid: M.cfg.contextInstanceId\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n    /**\n     * Adds a new page with the specified layout configuration.\n     *\n     * @param {Object} config - The configuration object for the new page.\n     * @returns {Promise<Object>} - The result of the AJAX call.\n     */\n    async function set_custom_pages(config) {\n        const request = {\n            methodname: 'local_edwiserpagebuilder_do_page_action',\n            args: {\n                action: \"add_new_page_with_layoutid\",\n                config: JSON.stringify(config)\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n\n    /**\n     * Publishes a custom page with the specified layout configuration.\n     *\n     * @param {number} id - The ID of the page to publish.\n     * @returns {Promise<Object>} - The result of the AJAX call.\n     */\n    async function publish_custom_pages(id){\n        const request = {\n            methodname: 'local_edwiserpagebuilder_do_page_action',\n            args: {\n                action: 'publish_page_with_layouts',\n                config: JSON.stringify({\n                    \"id\": id\n                })\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n\n    /**\n     * Sets the page links in the footer of the theme.\n     *\n     * @param {Object} templatecontext - The context object containing the page link configuration.\n     * @returns {Promise<Object>} - The result of the AJAX call.\n     */\n    async function set_pagelinks_in_footer(templatecontext){\n        const request = {\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: 'set_pagelinks_in_footer',\n                config: JSON.stringify(templatecontext)\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n    // function create_demo_courses(){\n    //     Ajax.call([{\n    //         methodname: 'local_edwiserreports_create_demo_courses',\n    //         args: {\n    //             action: \"create_demo_courses\",\n    //             config: JSON.stringify({})\n    //         },\n    //         done: function(response) {\n    //             var data = JSON.parse(response);\n    //             console.log(data);\n    //         },\n    //         fail: function(ex) {\n    //             Notification.exception(ex);\n    //         }\n    //     }]);\n    // }\n\n    function close_current_window () {\n        window.close();\n    }\n\n    function activate_remui() {\n        Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"set_theme\",\n                config: JSON.stringify({})\n            },\n            done: function(response) {\n                response = JSON.parse(response);\n\n                if (response == 'success') {\n                    window.location.reload();\n                }\n            },\n            fail: function(ex) {\n                Notification.exception(ex);\n            }\n        }]);\n    }\n\n    /**\n     * Handles the continuation of the setup process for the RemUI theme.\n     * This function is called when the user clicks the \"Continue Setup\" button on modal.\n     */\n    function continueSetupHandler() {\n        Ajax.call([{\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: \"set_theme\",\n                config: JSON.stringify({})\n            },\n            done: function(response) {\n                response = JSON.parse(response);\n\n                if(response == 'success'){\n\n                    $(\"body .setupwizard-modal\").hide();\n                    $(\"body .modal-backdrop\").hide();\n                    $(\"body .setupwizard-modal\").remove();\n\n                    var url =  M.cfg.wwwroot + '/theme/remui/setup.php';\n\n                    window.open(url, '_blank');\n                }\n            },\n            fail: function(ex) {\n                Notification.exception(ex);\n            }\n        }]);\n    }\n\n    function skipSetupHanlder() {\n        const request = {\n            methodname: 'theme_remui_do_setup_action',\n            args: {\n                action: 'skipsetup_from_modal',\n                config: JSON.stringify({})\n            },\n        };\n        return Ajax.call([request])[0];\n    }\n\n    /**\n     * Renders the setup wizard modal template and appends it to the body.\n     *\n     * @returns {Promise} A promise that resolves when the modal has been rendered and appended to the DOM.\n     */\n    function initSetupModal() {\n        // Check if modal is already initialized\n        if (modalInitialized) {\n            return;\n        }\n\n        let templateName = 'theme_remui/setupwizard/setupwizard_modal';\n        let isremui = M.cfg.theme === \"remui\";\n\n        if($('.setupwizard-modal').length > 0){\n            $('.setupwizard-modal').remove();\n        }\n\n        modalInitialized = true; // Set flag after initialization\n\n        return Templates.render(templateName, {\n            config: M.cfg,\n            isremui: isremui\n        }).done(function(html, js) {\n            Templates.appendNodeContents($('body'), html, js);\n        });\n    }\n\n    // *********COMMON EVENTS which is available on settings page during RemUI installation ***********\n    const registerCommonEvents = (showmodal) =>{\n\n        if (showmodal) {\n            initSetupModal();\n        }\n\n        $(document).on(\"click\", SELECTORS.NEXT_PAGE, nextPageHandler);\n\n        $(document).off(\"click\", SELECTORS.CONTINUESETUPBTN).on(\"click\", SELECTORS.CONTINUESETUPBTN, function(){\n            $(SELECTORS.SETUPWIZARD_MODAL).modal('hide');\n            let $questioname = \"setupmodal_continuesetupbtnstate_info\";\n            let $submittedata = {\n                question: \"User clicked on  the continue setup button\",\n                answer: \"Yes\",\n            };\n            feedbackcollection.submit_feedback($questioname,$submittedata);\n            continueSetupHandler();\n        });\n\n        $(document).on(\"click\", SELECTORS.SETUPWIZARD_MODAL + \" .btn-close\", function(){\n            $(SELECTORS.SETUPWIZARD_MODAL).modal('hide');\n            let $questioname = \"setupmodal_close_info\";\n            let $submittedata = {\n                question: \"User closed the setup wizard modal\",\n                answer: \"Yes\",\n            };\n            feedbackcollection.submit_feedback($questioname,$submittedata);\n            skipSetupHanlder();\n        });\n\n        $(document).on(\"click\", \"#remui-setup-checkbox\", function(){\n            if ($(this).is(\":checked\")) {\n                $(SELECTORS.CONTINUESETUPBTN).removeClass(\"disabled\");\n            } else {\n                $(SELECTORS.CONTINUESETUPBTN).addClass(\"disabled\");\n            }\n        });\n\n        $(document).on(\"keyup\", SELECTORS.LICENSEKEYINPUT, function(){\n            if($(this).val().length > 0) {\n                $(SELECTORS.LICENSESUBMITBTN).removeClass(\"disabled\");\n            } else {\n                $(SELECTORS.LICENSESUBMITBTN).addClass(\"disabled\");\n            }\n        });\n\n        $(document).on(\"click\", SELECTORS.LICENSESUBMITBTN, function(){\n            $(this).addClass(\"disabled\");\n            $(SELECTORS.LICENSEKEYINPUT).addClass(\"is-checking\");\n            licenseActivationHandler($(SELECTORS.LICENSEKEYINPUT).val(),\"activate\");\n        });\n        $(document).on(\"click\", SELECTORS.RESUMESETUPBTN, function(e){\n            e.preventDefault();\n\n            let $questioname = \"resume_setup_wizard\";\n            let $submittedata = {\n                question: \"User clicked on the resume setup button\",\n                answer: \"Yes\",\n            };\n            feedbackcollection.submit_feedback($questioname,$submittedata);\n            if($(this).attr(\"data-action\") == \"\"){\n                initSetupModal();\n            }else{\n                var pageurl = $(this).attr(\"href\");\n                window.open(pageurl, '_blank');\n            }\n        });\n        $(document).on(\"click\", SELECTORS.SKIPSERVERCHECKBTN, function(e){\n            let $questioname = \"skip_server_check_info\";\n            let $submittedata = {\n                question: \"User skipped the server permission check step\",\n                answer: \"Yes\",\n            };\n            feedbackcollection.submit_feedback($questioname,$submittedata);\n            window.location = M.cfg.wwwroot+ \"/my/\";\n        });\n    };\n\n    function init(isremui = false) {\n        $(document).ready(async function(){\n            await get_setupwizard_context();\n\n            fetchLanguages();\n\n            if(isremui){\n                initializeWizard();\n            } else {\n                add_activateremui_step();\n            }\n\n            registerCommonEvents(false);\n\n            $(document).off('submit', SELECTORS.USERINFORMATION_FORM).on('submit', SELECTORS.USERINFORMATION_FORM, submitUserInformation);\n\n            $(document).on('change', SELECTORS.USERINFORMATION_FORM + ' input[type=\"radio\"]', checkAllQuestionsAnswered);\n\n            $(document).on('input focus', SELECTORS.USERINFORMATION_FORM + ' input[type=\"text\"]', checkCustomAnswerInput);\n\n            $(document).on('click', SELECTORS.INSTALLABLE_PLUGINS_WRAPPER + ' .set-edwiserratingreview', set_ratingreview_to_allcourses);\n\n            $(document).on('click', SELECTORS.RETRYYOURSETUPBTN, () => window.location.reload());\n\n            $(document).on('submit', SELECTORS.SITESETUP_FEEDBACK, setup_sitesetup_feedback);\n\n            $(document).on('click', SELECTORS.ACTIVATEREMUIBTN, activate_remui);\n\n            $(document).on('click', SELECTORS.CLOSECURRENTWINDOW, close_current_window);\n\n            window.addEventListener('beforeunload', function(e) {\n                if ($(\".installable-plugins-wrapper\").lenght > 0) {\n                    e.preventDefault();\n                    return \"\";\n                }\n            });\n\n        });\n    }\n\n\n    return {\n        init: init,\n        registerModalEvents: function(showmodal) {\n            $(document).ready(async function(){\n                registerCommonEvents(showmodal);\n            });\n        }\n    };\n});\n"],"names":["define","$","Templates","Ajax","Notification","Str","feedbackcollection","SELECTORS","STEPSNAME","setupwizardContext","installationQueue","installedPluginList","pluginProgressStatusTemplate","allPluginInstallSuccess","modalInitialized","progressInterval","strings","key","component","LANGS","fetchLanguages","get_strings","then","results","get_setupwizard_context","async","Promise","resolve","call","methodname","args","action","config","JSON","stringify","done","response","parse","fail","ex","exception","append_template","parentSelector","template","context","render","M","cfg","html","js","appendNodeContents","handle_add_retry_button","setupbtn","btnclass","text","set_setup_status","step","install_exception_error","plugin","id","message","exceptionmsg","stack","remove","set_ratingreview_to_allcourses","this","addClass","setTimeout","userdeniedvalue","success","console","log","plugins_setup_after_installation","$data","forEach","Number","isratingreviewaddedtocourses","setDefaultCourseFormat","setPagebuilderForHomepage","enableFilterplugin","remove_downloaded_zip_and_purge_cache","purgecache","downloadPlugins","retryCount","reject","plugins","pluginslist","updateResponse","errorcode","catch","save_newplugin_settings","updateDatabase","updateData","parseInt","generateRandomNumber","push","timeout","handlePluginInstallation","url","epb_blocks_setup_info_handler","zipfile","installResponse","error","info","queueInstallation","length","shift","processQueue","min","max","Math","floor","random","installation_progress_value_handler","clearInterval","progressValues","updateProgressValues","each","progressValue","nextValue","siblings","removeClass","setInterval","shouldremove","epb_blocks_setup_info","sitesetuphandler","data","Object","entries","empty","keys","templatecontext","notices","value","append","pageinfo","$config","request","get_layout_info","set_home_page","pagedraftid","set_custom_pages","pageid","publish_custom_pages","pageurl","wwwroot","set_pagelinks_in_footer","submitUserInformation","e","preventDefault","formData","checkedInputs","input","name","attr","question","ans","val","answer","send_usersiteinfo_to_edwiser","nextPageHandler","checkAllQuestionsAnswered","totalQuestions","find","hasClass","checkCustomAnswerInput","textInput","targetQuestionId","targetQuestion","prop","setup_licenseactivation","licensekey","licenseActivationHandler","sessionStorage","setItem","setup_sitesetup","plugincontext","structuredpluginlist","_plugincontext2","setup_sitesetup_feedback","submit_feedback_handler","window","location","add_activateremui_step","current_step_handler","nextstep","requirechecks","_ref","nonwriteablepluginsmsg","allchecks","setup_servercheck","setup_userinformation","setup_final","initializeWizard","currentstep","getItem","resumestep","$licensekey","textinfoclass","blocklayout","layout","pagetype","region","subpagetypepattern","courseid","courseId","contextinstanceid","contextInstanceId","close_current_window","close","activate_remui","reload","initSetupModal","isremui","theme","registerCommonEvents","showmodal","document","on","off","modal","submit_feedback","hide","open","skipSetupHanlder","is","init","ready","addEventListener","lenght","registerModalEvents"],"mappings":"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"}